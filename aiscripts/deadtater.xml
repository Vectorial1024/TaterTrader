<?xml version="1.0" encoding="utf-8"?>
<!-- DeadTater Ai, Created by DeadAir, Inspired by and some code from Ludsoe. -->
<aiscript name="deadtater" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd" version="5">
	<order id="DeadTater" name="{3282837,500}" description="Advanced Trader Logic" category="trade" infinite="true" allowinloop="false">
		<params>
			<!-- Define where the trader will base itself -->
			<param name="range" default="if this.assignedcontrolled.jobmainsector then this.assignedcontrolled.jobmainsector else this.sector" type="sector" text="{1041, 10005}" comment="Home Sector">
				<input_param name="class" value="[class.sector]"/>
			</param>
			<!-- Range configurations -->
			<param name="minbuy" default="0" type="internal" text="{1041, 10066}" comment="Min gate distance to buy. Buy range supported if $minbuy and $maxbuy are provided"/>
			<param name="maxbuy" default="[[@this.assignedcontrolled.commander.tradenpc.skill.management, @this.assignedcontrolled.commander.pilot.skill.management, @this.assignedcontrolled.pilot.skill.piloting].max,1].max" type="number" text="{1041, 10054}" comment="Max gate distance to buy. Buy range supported if $minbuy and $maxbuy are provided">
				<input_param name="startvalue" value="0"/>
				<input_param name="min" value="0"/>
				<input_param name="max" value="[[@this.assignedcontrolled.commander.tradenpc.skill.management, @this.assignedcontrolled.commander.pilot.skill.management, @this.assignedcontrolled.pilot.skill.piloting].max,1].max"/>
				<input_param name="step" value="1"/>
			</param>
			<param name="minsell" default="0" type="internal" text="{1041, 10068}" comment="Min gate distance to sell. Sell range supported if $minsell and $maxsell are provided"/>
			<param name="maxsell" default="[[@this.assignedcontrolled.commander.tradenpc.skill.management, @this.assignedcontrolled.commander.pilot.skill.management, @this.assignedcontrolled.pilot.skill.piloting].max,1].max" type="number" text="{1041, 10057}" comment="Max gate distance to sell. Sell range supported if $minsell and $maxsell are provided">
				<input_param name="startvalue" value="0"/>
				<input_param name="min" value="0"/>
				<input_param name="max" value="[[@this.assignedcontrolled.commander.tradenpc.skill.management, @this.assignedcontrolled.commander.pilot.skill.management, @this.assignedcontrolled.pilot.skill.piloting].max,1].max"/>
				<input_param name="step" value="1"/>
			</param>
			<!-- Consider distance -->
			<param name="distancecheck" type="bool" default="false" text="{3282837,501}" comment="Should we compare distances between trade deals?"/>
			<param name="distancecheckpercent" default="5" type="number" text="{3282837,502}" comment="((1.0-$distancecheckpercent/100.0) ^ $distance) * profit">
				<input_param name="startvalue" value="5"/>
				<input_param name="min" value="1"/>
				<input_param name="max" value="10"/>
				<input_param name="step" value="1"/>
			</param>
			<!-- Prefer own faction for buy and sell -->
			<param name="preferownfaction" type="bool" default="false" text="{3282837,503}" comment="My faction to my faction"/>
			<!-- Prefer selling to own stations -->
			<param name="preferownfactionsell" type="bool" default="false" text="{3282837,512}" comment="Other faction to my faction"/>
			<!-- Prefer buying from own stations -->
			<param name="preferownfactionbuy" type="bool" default="false" text="{3282837,513}" comment="My faction to other faction"/>
			<!-- Ignore trade rules -->
			<param name="ignoretraderules" type="bool" default="false" text="{3282837,504}" comment="If we trade with a player station, should we ignore trade rules?"/>
			<!-- Automatically choose wares -->
			<param name="autowares" type="bool" default="if this.assignedcontrolled.isplayerowned then true else false" text="{3282837,505}" comment="Automatically choose legal wares."/>
			<!-- Consider illegal? -->
			<param name="illegalwares" type="bool" default="false" text="{3282837,506}" comment="Enable wares considered illegal in range."/>
			<!-- Minimum fill -->
			<param name="minfill" type="bool" default="false" text="{3282837,507}" comment="Apply minimum fill percent"/>
			<!-- Minimum fill amount -->
			<param name="minfillpercent" default="25" type="number" text="{3282837,508}" comment="(capacity * $minfillpercent) / 100">
				<input_param name="startvalue" value="5"/>
				<input_param name="min" value="5"/>
				<input_param name="max" value="95"/>
				<input_param name="step" value="5"/>
			</param>
			<!-- Ignore carrier/auxiliary buyers -->
			<param name="ignoreshipbuyers" type="bool" default="true" text="{3282837,511}" comment="Trading with ships is still terrible."/>
			<!-- Logbook entries -->
			<param name="enablelogbook" type="bool" default="if this.assignedcontrolled.isplayerowned then true else false" text="{3282837,509}" comment="Enable logbook messages?"/>
			<!-- Manually add wares -->
			<param name="warebasket" required="false" default="if @this.ship.warebasket.count then this.ship.warebasket.list else []" type="list" text="{1041, 10146}" comment="Manually added wares or job input">
				<input_param name="type" value="'ware'"/>
				<input_param name="cancarry" value="this.assignedcontrolled"/>
			</param>
			<param name="transfercreditoption" type="bool" default="false" text="{3282837,514}" comment="Transfer credits when buying from owned stations."/>
			<param name="usequeue" type="bool" default="true" text="{3282837,515}" comment="Have ships use queue system for trades."/>
			<!-- If your looking into tweaking this, be aware that high space speeds may cause performance issues
			<param name="scanspeed" default="5" type="number" text="Scan Speed" comment="How fast do we calculate?">
				<input_param name="startvalue" value="5"/>
				<input_param name="min" value="1"/>
				<input_param name="max" value="15"/>
				<input_param name="step" value="1"/>
			</param>-->
		</params>
		<requires>
			<match shiptype="shiptype.lasertower" negate="true"/>
		</requires>
	</order>
	<interrupts>
		<handler ref="SectorChangeHandler"/>
		<handler ref="AttackHandler"/>
		<handler ref="MissileLockHandler"/>
		<handler ref="ScannedHandler"/>
		<handler ref="InspectedHandler"/>
		<handler ref="FoundAbandonedHandler"/>
		<handler ref="FoundLockboxHandler"/>
		<handler ref="ResupplyHandler"/>
		<handler ref="TargetInvalidHandler"/>
		<handler ref="TideHandler"/>
	</interrupts>
	<init>
		<!-- 20231209 Init only runs on very first iteration. Moved most previous variables to the attention node so they are updated. These are one time actions to ensure a clean smooth tater experience. -->
		<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- Starting Log File -- %s'.[player.age]" output="false" append="false"/>
		<!-- SHOW FREETRADE WHILE HANDLING INIT -->
		<set_command command="command.freetrade"/>
		<!-- Remove account if we have a temporary -->
		<do_if value="this.assignedcontrolled.hasownaccount and not this.assignedcontrolled.tradeorders.count">
			<remove_object_account object="this.assignedcontrolled" transfer="true"/>
		</do_if>
		<!-- minfill and minfillpercent -->
		<do_if value="$minfill">
			<set_value name="$universalcapacity" exact="this.assignedcontrolled.cargo.free.universal"/>
			<set_value name="$containercapacity" exact="this.assignedcontrolled.cargo.free.container + $universalcapacity"/>
			<set_value name="$solidcapacity" exact="this.assignedcontrolled.cargo.free.solid + $universalcapacity"/>
			<set_value name="$liquidcapacity" exact="this.assignedcontrolled.cargo.free.liquid + $universalcapacity"/>
			<set_value name="$minfillcontainer" exact="($containercapacity * ($minfillpercent / 100.0))i"/>
			<set_value name="$minfillsolid" exact="($solidcapacity * ($minfillpercent / 100.0))i"/>
			<set_value name="$minfillliquid" exact="($liquidcapacity * ($minfillpercent / 100.0))i"/>
			<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Capacity/MinFill -- Universal: %s -- Container: %s / %s -- Solid: %s / %s -- Liquid: %s / %s'.[player.age,$universalcapacity,$containercapacity,$minfillcontainer,$solidcapacity,$minfillsolid,$liquidcapacity,$minfillliquid]" output="false" append="true"/>
			<remove_value name="$universalcapacity"/>
			<remove_value name="$containercapacity"/>
			<remove_value name="$solidcapacity"/>
			<remove_value name="$liquidcapacity"/>
			<remove_value name="$minfillcontainer"/>
			<remove_value name="$minfillsolid"/>
			<remove_value name="$minfillliquid"/>
		</do_if>
	</init>
	<attention min="unknown">
		<actions>
			<label name="beginning"/>
			<!-- 20231209 With init being only run once, beginning gets a bit more fleshed out. Old debug texts had left over attributes from debug_to_file. -->
			<!-- Beep Boop Calculating -->
			<set_command_action commandaction="commandaction.calculating"/>
			<!-- Debug Vars -->
			<set_value name="$TaterDebugChance" exact="false"/>
			<set_value name="$TaterBlacklistDebugChance" exact="false"/>
			<set_value name="$debugchance" exact="0"/>
			<set_value name="$starttime" exact="player.age"/>
			<!-- Blacklist group -->
			<include_interrupt_actions ref="GetBlacklistgroup"/>
			<!-- 20231209 Migration from init -->
			<do_if value="this.assignedcontrolled.isplayerowned">
				<set_value name="$scantickrate" exact="10"/>
				<set_value name="$playerowned" exact="true"/>
			</do_if>
			<do_else>
				<!-- Ware basket update for NPC ships -->
				<do_if value="(this.assignedcontrolled.job != '') and (this.assignedcontrolled.warebasket.count) and ($autowares == false)">
					<set_value name="$warebasket" exact="this.assignedcontrolled.warebasket.list"/>
				</do_if>
				<set_value name="$scantickrate" exact="2"/>
				<set_value name="$playerowned" exact="false"/>
			</do_else>
			<!-- Reset scantick -->
			<set_value name="$scantick" exact="0"/>
			<!-- check possible sectors for trade -->
			<label name="checksectorsinrange"/>
			<!-- 20231209 Track time taken for check buyspaces, check sellspaces, and the entire queen code section. -->
			<set_value name="$CheckSectorsStartTime" exact="player.age"/>
			<do_if value="(not $usequeue?) or @$usequeue">
				<!-- 20240708 // CHECKSPACE QUEUE // Check Sectors -->
				<do_if value="global.$DATaterQueueTable.$CheckSpaceQueue.{this.assignedcontrolled.trueowner}?">
					<append_to_list name="global.$DATaterQueueTable.$CheckSpaceQueue.{this.assignedcontrolled.trueowner}" exact="this.assignedcontrolled" unique="true"/>
				</do_if>
				<do_else>
					<append_to_list name="global.$DATaterQueueTable.$CheckSpaceQueue.{this.assignedcontrolled.trueowner}" exact="this.assignedcontrolled" unique="true" create="true"/>
				</do_else>
				<do_if value="not global.$DATaterQueueTable.$FactionCheckSpaceQueue.indexof.{this.assignedcontrolled.trueowner}">
					<append_to_list name="global.$DATaterQueueTable.$FactionCheckSpaceQueue" exact="this.assignedcontrolled.trueowner" unique="true"/>
				</do_if>
				<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Queued up for trade -- Spot in queue %s / %s'.[player.age,global.$DATaterQueueTable.$CheckSpaceQueue.{this.assignedcontrolled.trueowner}.indexof.{this.assignedcontrolled},global.$DATaterQueueTable.$CheckSpaceQueue.{this.assignedcontrolled.trueowner}.count]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
				<set_value name="$ExpectedDelay" exact="[(global.$DATaterQueueTable.$CheckSpaceQueue.{this.assignedcontrolled.trueowner}.indexof.{this.assignedcontrolled} * 3)s,60s].max"/>
				<wait sinceversion="5">
					<interrupt>
						<conditions>
							<event_object_signalled object="this.assignedcontrolled" param="'DeadTaterProceed'"/>
						</conditions>
						<actions>
							<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Received signal to proceed'.[player.age]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
						</actions>
					</interrupt>
					<interrupt_after_time time="$ExpectedDelay"/>
				</wait>
			</do_if>
			<set_value name="$TotalQueueTime" exact="player.age - $CheckSectorsStartTime"/>
			<remove_value name="$ExpectedDelay"/>
			<!-- 20240421 // QUEUE END // Check Sectors -->
			<!-- 20241030 Improving blacklist filtering for multi sector clusters and hopefully optimization -->
			<!-- Check buyspaces -->
			<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- minbuy %s -- maxbuy %s -- minsell %s -- maxsell %s'.[player.age,$minbuy,$maxbuy,$minsell,$maxsell]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
			<do_if value="$playerowned">
				<find_sector_in_range distances="$SectorTable" multiple="true" object="$range" mindistance="$minbuy" maxdistance="$maxbuy" known="true"/>
			</do_if>
			<do_else>
				<find_sector_in_range distances="$SectorTable" multiple="true" object="$range" mindistance="$minbuy" maxdistance="$maxbuy"/>
			</do_else>
			<set_value name="$buyspaceswithduplicates" exact="$SectorTable.keys.sorted"/>
			<set_value name="$buyspaceswithbanned" exact="[]"/>
			<set_value name="$buyspaces" exact="[]"/>
			<do_for_each name="$Sector" in="$buyspaceswithduplicates">
				<append_to_list name="$buyspaceswithbanned" exact="$Sector" unique="true"/>
			</do_for_each>
			<remove_value name="$SectorTable"/>
			<remove_value name="$buyspaceswithduplicates"/>
			<!-- Check sellspaces -->
			<do_if value="$playerowned">
				<find_sector_in_range distances="$SectorTable" multiple="true" object="$range" mindistance="$minsell" maxdistance="$maxsell" known="true"/>
			</do_if>
			<do_else>
				<find_sector_in_range distances="$SectorTable" multiple="true" object="$range" mindistance="$minsell" maxdistance="$maxsell"/>
			</do_else>
			<set_value name="$sellspaceswithduplicates" exact="$SectorTable.keys.sorted"/>
			<set_value name="$sellspaceswithbanned" exact="[]"/>
			<set_value name="$sellspaces" exact="[]"/>
			<do_for_each name="$Sector" in="$sellspaceswithduplicates">
				<append_to_list name="$sellspaceswithbanned" exact="$Sector" unique="true"/>
			</do_for_each>
			<remove_value name="$SectorTable"/>
			<remove_value name="$sellspaceswithduplicates"/>
			<!-- 20231212 Central Tater Queue uses minimal delay -->
			<set_value name="$DeadTaterDelay" exact="5ms"/>
			<!-- 20240713 Non-Queue uses randomized delay -->
			<do_if value="$usequeue? and (@$usequeue == false)">
				<set_value name="$DeadTaterDelay" min="50ms" max="200ms" seed="this.assignedcontrolled"/>
			</do_if>
			<!-- 20241030 Start rewrite for multi sector clusters and optimizations -->
			<set_value name="$CheckBuySpacesStartTime" exact="player.age"/>
			<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater // Starting $buyspaces check now // %s'.[$CheckBuySpacesStartTime]" output="false" append="true" chance="@$TaterBlacklistDebugChance * 100"/>
			<do_for_each name="$LocSpace" in="$buyspaceswithbanned">
				<wait exact="$DeadTaterDelay"/>
				<set_value name="$SectorInvalid" exact="false"/>
				<do_if value="$LocSpace == $range">
					<do_if value="$LocSpace.isclass.cluster">
						<find_sector name="$LocSectors" space="$LocSpace" multiple="true"/>
						<do_for_each name="$LocSector" in="$LocSectors">
							<do_if value="not $buyspaces.indexof.{$LocSector}">
								<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Added to final buyspaces list ($range.sector)'.[$LocSector.knownname]" output="false" append="true" chance="@$TaterBlacklistDebugChance * 100"/>
								<append_to_list name="$buyspaces" exact="$LocSector"/>
							</do_if>
						</do_for_each>
						<continue/>
					</do_if>
					<do_elseif value="$LocSpace.isclass.sector">
						<do_if value="not $buyspaces.indexof.{$LocSpace}">
							<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Added to final buyspaces list ($range)'.[$LocSpace.knownname]" output="false" append="true" chance="@$TaterBlacklistDebugChance * 100"/>
							<append_to_list name="$buyspaces" exact="$LocSpace"/>
						</do_if>
						<continue/>
					</do_elseif>
					<do_else>
						<!-- ERROR -->
					</do_else>
				</do_if>
				<do_elseif value="$LocSpace.isclass.cluster">
					<find_sector name="$LocSectors" space="$LocSpace" multiple="true"/>
					<do_for_each name="$LocSector" in="$LocSectors">
						<do_if value="not $buyspaceswithbanned.indexof.{$LocSector}">
							<append_to_list name="$buyspaceswithbanned" exact="$LocSector"/>
						</do_if>
					</do_for_each>
					<continue/>
				</do_elseif>
				<do_elseif value="$LocSpace.isclass.sector and (not $buyspaces.indexof.{$LocSpace})">
					<!-- Output info every time so we know what is being tested -->
					<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Checking Sector -- $range GateDistance %s -- DeadTaterDelay %s'.[$LocSpace.knownname,$range.gatedistance.{$LocSpace}.{$blacklistgroup}.{this.assignedcontrolled},$DeadTaterDelay]" output="false" append="true" chance="@$TaterBlacklistDebugChance * 100"/>
					<do_if value="(this.assignedcontrolled.trueowner.relationto.{$LocSpace.trueowner} le -0.32) or ($LocSpace.isblacklisted.{blacklisttype.sectortravel}.{$blacklistgroup}.{this.assignedcontrolled}) or ($LocSpace.isblacklisted.{blacklisttype.sectoractivity}.{$blacklistgroup}.{this.assignedcontrolled})">
						<!-- Filter out: KillAll relation, travel blacklist, activity blacklist -->
						<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Removed reason -- relation: %s -- travel blacklist: %s -- activity blacklist: %s'.[$LocSpace.knownname,(this.assignedcontrolled.trueowner.relationto.{$LocSpace.trueowner} le -0.32),($LocSpace.isblacklisted.{blacklisttype.sectortravel}.{$blacklistgroup}.{this.assignedcontrolled}),($LocSpace.isblacklisted.{blacklisttype.sectoractivity}.{$blacklistgroup}.{this.assignedcontrolled})]" output="false" append="true" chance="@$TaterBlacklistDebugChance * 100"/>
						<set_value name="$SectorInvalid" exact="true"/>
					</do_if>
					<do_elseif value="($range.gatedistance.{$LocSpace}.{$blacklistgroup}.{this.assignedcontrolled} lt 0) or ($range.gatedistance.{$LocSpace}.{$blacklistgroup}.{this.assignedcontrolled} gt $maxbuy)">
						<!-- Filter out: Egosoft gatedistance found no valid route for blacklist, Sectors within normal range but further than blacklist route distance -->
						<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Removed reason -- Invalid Path: %s -- Too Far: %s'.[$LocSpace.knownname,($range.gatedistance.{$LocSpace}.{$blacklistgroup}.{this.assignedcontrolled} lt 0),($range.gatedistance.{$LocSpace}.{$blacklistgroup}.{this.assignedcontrolled} gt $maxbuy)]" output="false" append="true" chance="@$TaterBlacklistDebugChance * 100"/>
						<set_value name="$SectorInvalid" exact="true"/>
					</do_elseif>
					<do_else>
						<get_jump_path component="$JumpPath" multiple="true" useblacklist="$blacklistgroup" refobject="this.assignedcontrolled">
							<start object="$range"/>
							<end object="$LocSpace"/>
						</get_jump_path>
						<do_if value="($JumpPath == null) or ($JumpPath.count le 0)">
							<!-- Filter out: Unreachable -->
							<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- JumpPath.count %s -- Invalid Jump Path'.[$LocSpace.knownname,@$JumpPath.count]" output="false" append="true" chance="@$TaterBlacklistDebugChance * 100"/>
							<remove_value name="$JumpPath"/>
							<set_value name="$SectorInvalid" exact="true"/>
						</do_if>
						<do_else>
							<do_all exact="$JumpPath.count" counter="$c">
								<do_if value="$JumpPath.{$c}.isclass.[class.cluster,class.sector] and (not $buyspaces.indexof.{$JumpPath.{$c}}) and ($JumpPath.{$c} != $range)">
									<!-- Only check clusters and sectors, skip if already validated -->
									<wait exact="1ms"/>
									<do_if value="(this.assignedcontrolled.trueowner.relationto.{$JumpPath.{$c}.trueowner} le -0.32) or ($JumpPath.{$c}.isblacklisted.{blacklisttype.sectortravel}.{$blacklistgroup}.{this.assignedcontrolled})">
										<!-- Filter out: KillAll relation, travel blacklist -->
										<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- End: %s -- Invalid Route Portion: %s -- Removed reason -- relation: %s -- travel blacklist: %s'.[$LocSpace.knownname,$JumpPath.{$c}.knownname,(this.assignedcontrolled.trueowner.relationto.{$JumpPath.{$c}.trueowner} le -0.32),($JumpPath.{$c}.isblacklisted.{blacklisttype.sectortravel}.{$blacklistgroup}.{this.assignedcontrolled})]" output="false" append="true" chance="@$TaterBlacklistDebugChance * 100"/>
										<set_value name="$SectorInvalid" exact="true"/>
										<!-- Break out of the do_all JumpPath -->
										<break/>
									</do_if>
								</do_if>
							</do_all>
						</do_else>
						<remove_value name="$JumpPath"/>
					</do_else>
				</do_elseif>
				<do_if value="(not $SectorInvalid?) or ($SectorInvalid == true)">
					<!-- Sector was not checked or was invalid, move to next -->
					<continue/>
				</do_if>
				<do_elseif value="$SectorInvalid? and ($SectorInvalid == false) and @$LocSpace and $LocSpace.isclass.[class.cluster,class.sector]">
					<do_if value="$LocSpace.isclass.cluster">
						<find_sector name="$LocSectors" space="$LocSpace" multiple="true"/>
						<do_for_each name="$LocSector" in="$LocSectors">
							<do_if value="not $buyspaces.indexof.{$LocSector}">
								<append_to_list name="$buyspaces" exact="$LocSector"/>
								<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Added to final buyspaces list'.[$LocSector.knownname]" output="false" append="true" chance="@$TaterBlacklistDebugChance * 100"/>
							</do_if>
						</do_for_each>
						<remove_value name="$LocSectors"/>
					</do_if>
					<do_elseif value="$LocSpace.isclass.sector and (not $buyspaces.indexof.{$LocSpace})">
						<append_to_list name="$buyspaces" exact="$LocSpace"/>
						<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Added to final buyspaces list'.[$LocSpace.knownname]" output="false" append="true" chance="@$TaterBlacklistDebugChance * 100"/>
					</do_elseif>
				</do_elseif>
				<do_else>
					<!-- ERROR -->
				</do_else>
			</do_for_each>
			<!-- Check sellspaces time start. This is also the ending of checking buyspaces -->
			<set_value name="$CheckSellSpacesStartTime" exact="player.age"/>
			<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater // Starting $sellspaces check now // %s'.[$CheckSellSpacesStartTime]" output="false" append="true" chance="@$TaterBlacklistDebugChance * 100"/>
			<do_for_each name="$LocSpace" in="$sellspaceswithbanned">
				<wait exact="$DeadTaterDelay"/>
				<set_value name="$SectorInvalid" exact="false"/>
				<do_if value="$LocSpace == $range">
					<do_if value="$LocSpace.isclass.cluster">
						<find_sector name="$LocSectors" space="$LocSpace" multiple="true"/>
						<do_for_each name="$LocSector" in="$LocSectors">
							<do_if value="not $sellspaces.indexof.{$LocSector}">
								<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Added to final sellspaces list'.[$LocSector.knownname]" output="false" append="true" chance="@$TaterBlacklistDebugChance * 100"/>
								<append_to_list name="$sellspaces" exact="$LocSector"/>
							</do_if>
						</do_for_each>
						<continue/>
					</do_if>
					<do_elseif value="$LocSpace.isclass.sector">
						<do_if value="not $sellspaces.indexof.{$LocSpace}">
							<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Added to final sellspaces list'.[$LocSpace.knownname]" output="false" append="true" chance="@$TaterBlacklistDebugChance * 100"/>
							<append_to_list name="$sellspaces" exact="$LocSpace"/>
						</do_if>
						<continue/>
					</do_elseif>
					<do_else>
						<!-- ERROR -->
					</do_else>
				</do_if>
				<do_elseif value="$LocSpace.isclass.cluster">
					<find_sector name="$LocSectors" space="$LocSpace" multiple="true"/>
					<do_for_each name="$LocSector" in="$LocSectors">
						<do_if value="not $sellspaceswithbanned.indexof.{$LocSector}">
							<append_to_list name="$sellspaceswithbanned" exact="$LocSector"/>
						</do_if>
					</do_for_each>
					<continue/>
				</do_elseif>
				<do_elseif value="$LocSpace.isclass.sector and (not ($buyspaces.indexof.{$LocSpace} or $sellspaces.indexof.{$LocSpace}))">
					<!-- Output info every time so we know what is being tested -->
					<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Checking Sector -- $range GateDistance %s -- DeadTaterDelay %s'.[$LocSpace.knownname,$range.gatedistance.{$LocSpace}.{$blacklistgroup}.{this.assignedcontrolled},$DeadTaterDelay]" output="false" append="true" chance="@$TaterBlacklistDebugChance * 100"/>
					<do_if value="(this.assignedcontrolled.trueowner.relationto.{$LocSpace.trueowner} le -0.32) or ($LocSpace.isblacklisted.{blacklisttype.sectortravel}.{$blacklistgroup}.{this.assignedcontrolled}) or ($LocSpace.isblacklisted.{blacklisttype.sectoractivity}.{$blacklistgroup}.{this.assignedcontrolled})">
						<!-- Filter out: KillAll relation, travel blacklist, activity blacklist -->
						<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Removed reason -- relation: %s -- travel blacklist: %s -- activity blacklist: %s'.[$LocSpace.knownname,(this.assignedcontrolled.trueowner.relationto.{$LocSpace.trueowner} le -0.32),($LocSpace.isblacklisted.{blacklisttype.sectortravel}.{$blacklistgroup}.{this.assignedcontrolled}),($LocSpace.isblacklisted.{blacklisttype.sectoractivity}.{$blacklistgroup}.{this.assignedcontrolled})]" output="false" append="true" chance="@$TaterBlacklistDebugChance * 100"/>
						<set_value name="$SectorInvalid" exact="true"/>
					</do_if>
					<do_elseif value="($range.gatedistance.{$LocSpace}.{$blacklistgroup}.{this.assignedcontrolled} lt 0) or ($range.gatedistance.{$LocSpace}.{$blacklistgroup}.{this.assignedcontrolled} gt $maxsell)">
						<!-- Filter out: Egosoft gatedistance found no valid route for blacklist, Sectors within normal range but further than blacklist route distance -->
						<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Removed reason -- Invalid Path: %s -- Too Far: %s'.[$LocSpace.knownname,($range.gatedistance.{$LocSpace}.{$blacklistgroup}.{this.assignedcontrolled} lt 0),($range.gatedistance.{$LocSpace}.{$blacklistgroup}.{this.assignedcontrolled} gt $maxsell)]" output="false" append="true" chance="@$TaterBlacklistDebugChance * 100"/>
						<set_value name="$SectorInvalid" exact="true"/>
					</do_elseif>
					<do_else>
						<get_jump_path component="$JumpPath" multiple="true" useblacklist="$blacklistgroup" refobject="this.assignedcontrolled">
							<start object="$range"/>
							<end object="$LocSpace"/>
						</get_jump_path>
						<do_if value="($JumpPath == null) or ($JumpPath.count le 0)">
							<!-- Filter out: Unreachable -->
							<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- JumpPath.count %s -- Invalid Jump Path'.[$LocSpace.knownname,@$JumpPath.count]" output="false" append="true" chance="@$TaterBlacklistDebugChance * 100"/>
							<remove_value name="$JumpPath"/>
							<set_value name="$SectorInvalid" exact="true"/>
						</do_if>
						<do_else>
							<do_all exact="$JumpPath.count" counter="$c">
								<do_if value="$JumpPath.{$c}.isclass.[class.cluster,class.sector] and (not ($buyspaces.indexof.{$JumpPath.{$c}} or $sellspaces.indexof.{$JumpPath.{$c}})) and ($JumpPath.{$c} != $range)">
									<!-- Only check clusters and sectors, skip if already validated -->
									<wait exact="1ms"/>
									<do_if value="(this.assignedcontrolled.trueowner.relationto.{$JumpPath.{$c}.trueowner} le -0.32) or ($JumpPath.{$c}.isblacklisted.{blacklisttype.sectortravel}.{$blacklistgroup}.{this.assignedcontrolled})">
										<!-- Filter out: KillAll relation, travel blacklist -->
										<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- End: %s -- Invalid Route Portion: %s -- Removed reason -- relation: %s -- travel blacklist: %s'.[$LocSpace.knownname,$JumpPath.{$c}.knownname,(this.assignedcontrolled.trueowner.relationto.{$JumpPath.{$c}.trueowner} le -0.32),($JumpPath.{$c}.isblacklisted.{blacklisttype.sectortravel}.{$blacklistgroup}.{this.assignedcontrolled})]" output="false" append="true" chance="@$TaterBlacklistDebugChance * 100"/>
										<set_value name="$SectorInvalid" exact="true"/>
										<!-- Break out of the do_all JumpPath -->
										<break/>
									</do_if>
								</do_if>
							</do_all>
						</do_else>
						<remove_value name="$JumpPath"/>
					</do_else>
				</do_elseif>
				<do_if value="(not $SectorInvalid?) or ($SectorInvalid == true)">
					<!-- Sector was not checked or was invalid, move to next -->
					<continue/>
				</do_if>
				<do_elseif value="$SectorInvalid? and ($SectorInvalid == false) and @$LocSpace and $LocSpace.isclass.[class.cluster,class.sector]">
					<do_if value="$LocSpace.isclass.cluster">
						<find_sector name="$LocSectors" space="$LocSpace" multiple="true"/>
						<do_for_each name="$LocSector" in="$LocSectors">
							<do_if value="not $sellspaces.indexof.{$LocSector}">
								<append_to_list name="$sellspaces" exact="$LocSector"/>
								<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Added to final sellspaces list'.[$LocSector.knownname]" output="false" append="true" chance="@$TaterBlacklistDebugChance * 100"/>
							</do_if>
						</do_for_each>
						<remove_value name="$LocSectors"/>
					</do_if>
					<do_elseif value="$LocSpace.isclass.sector and (not $sellspaces.indexof.{$LocSpace})">
						<append_to_list name="$sellspaces" exact="$LocSpace"/>
						<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Added to final sellspaces list'.[$LocSpace.knownname]" output="false" append="true" chance="@$TaterBlacklistDebugChance * 100"/>
					</do_elseif>
				</do_elseif>
				<do_else>
					<!-- ERROR -->
				</do_else>
			</do_for_each>
			<remove_value name="$buyspaceswithbanned"/>
			<remove_value name="$sellspaceswithbanned"/>
			<!-- 20241030 End rewrite of blacklist filtering -->
			<do_if value="@$TaterBlacklistDebugChance">
				<debug_to_file name="this.ship.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- Sectors in Range -- Buy: %s -- Sell: %s -- Time spent checking sectors: %s -- Time spent checking buy spaces: %s -- Time spent checking sell spaces: %s -- Time spent in queue: %s'.[$buyspaces.count,$sellspaces.count,(player.age - $CheckSectorsStartTime - $TotalQueueTime),($CheckSellSpacesStartTime - $CheckBuySpacesStartTime),(player.age - $CheckSellSpacesStartTime),$TotalQueueTime]" output="false" append="true"/>
			</do_if>
			<remove_value name="$DeadTaterDelay"/>
			<wait exact="1.0s" sinceversion="2"/>
			<!-- Clean out our cargo -->
			<label name="sellcargo"/>
			<!-- What wares do we currently have, lets try to sell them to the highest bidder. -->
			<set_value name="$Cargo" exact="this.assignedcontrolled.cargo.list"/>
			<do_if value="$Cargo.count" min="1">
				<set_command_action commandaction="commandaction.searchingtrades"/>
				<!-- 20231209 track time to sell cargo -->
				<set_value name="$SellCargoStartTime" exact="player.age"/>
				<do_if value="(not $usequeue?) or @$usequeue">
					<!-- 20240708 // TRADELOGIC QUEUE // sellcargo -->
					<do_if value="global.$DATaterQueueTable.$TradeLogicQueue.{this.assignedcontrolled.trueowner}?">
						<append_to_list name="global.$DATaterQueueTable.$TradeLogicQueue.{this.assignedcontrolled.trueowner}" exact="this.assignedcontrolled" unique="true"/>
					</do_if>
					<do_else>
						<append_to_list name="global.$DATaterQueueTable.$TradeLogicQueue.{this.assignedcontrolled.trueowner}" exact="this.assignedcontrolled" unique="true" create="true"/>
					</do_else>
					<do_if value="not global.$DATaterQueueTable.$FactionTradeLogicQueue.indexof.{this.assignedcontrolled.trueowner}">
						<append_to_list name="global.$DATaterQueueTable.$FactionTradeLogicQueue" exact="this.assignedcontrolled.trueowner" unique="true"/>
					</do_if>
					<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Queued up for trade -- Spot in queue %s / %s'.[player.age,global.$DATaterQueueTable.$TradeLogicQueue.{this.assignedcontrolled.trueowner}.indexof.{this.assignedcontrolled},global.$DATaterQueueTable.$TradeLogicQueue.{this.assignedcontrolled.trueowner}.count]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
					<set_value name="$ExpectedDelay" exact="[(global.$DATaterQueueTable.$TradeLogicQueue.{this.assignedcontrolled.trueowner}.indexof.{this.assignedcontrolled} * 6)s,60s].max"/>
					<wait sinceversion="5">
						<interrupt>
							<conditions>
								<event_object_signalled object="this.assignedcontrolled" param="'DeadTaterProceed'"/>
							</conditions>
							<actions>
								<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Received signal to proceed'.[player.age]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
							</actions>
						</interrupt>
						<interrupt_after_time time="$ExpectedDelay"/>
					</wait>
				</do_if>
				<set_value name="$TotalQueueTime" exact="player.age - $SellCargoStartTime"/>
				<remove_value name="$ExpectedDelay"/>
				<!-- 20240421 // QUEUE END // sellcargo -->
				<do_if value="@$TaterDebugChance">
					<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Scanning CargoBay: %s'.[player.age,$Cargo.count]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
					<do_all exact="$Cargo.count" counter="$ware">
						<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- CargoBay Contains: %s -- Amount: %s'.[player.age,$Cargo.{$ware},this.assignedcontrolled.cargo.{$Cargo.{$ware}}.count]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
					</do_all>
				</do_if>
				<set_value name="$buyoffers" exact="[]"/>
				<do_all exact="$sellspaces.count" counter="$sector">
					<do_all exact="$Cargo.count" counter="$ware">
						<find_buy_offer tradepartner="this.assignedcontrolled" space="$sellspaces.{$sector}" result="$buyers" wares="$Cargo.{$ware}" multiple="true">
							<match_buyer>
								<match_content checkoperational="true">
									<match_dock size="this.assignedcontrolled.docksize" trading="true"/>
								</match_content>
								<match_relation_to object="this.assignedcontrolled" relation="dock" comparison="ge"/>
								<match tradesknownto="this.owner"/>
								<match_use_blacklist group="$blacklistgroup" type="blacklisttype.objectactivity" object="this.assignedcontrolled"/>
							</match_buyer>
						</find_buy_offer>
						<set_value name="$scantick" exact="1" operation="add"/>
						<do_if value="$scantick gt $scantickrate">
							<set_value name="$scantick" exact="0"/>
							<wait exact="1ms"/>
						</do_if>
						<do_if value="@$buyers.count">
							<do_all exact="$buyers.count" counter="$buy">
								<!-- 20241002 Updating $ignoreshipbuyers code -->
								<do_if value="(not $ignoreshipbuyers) or ($ignoreshipbuyers and (not $buyers.{$buy}.buyer.isclass.ship))">
									<!-- 20241002 Implementing fix for stations with no storage -->
									<do_if value="$buyers.{$buy}.buyer.cargo.{$Cargo.{$ware}}.free">
										<append_to_list name="$buyoffers" exact="$buyers.{$buy}"/>
									</do_if>
									<do_else>
										<debug_text text="'MOD: DeadTater -- %s(%s) -- Skipping offer from: %s(%s) in %s -- No cargo capacity for type: %s'.[this.assignedcontrolled.name,this.assignedcontrolled.idcode,$buyers.{$buy}.buyer.knownname,$buyers.{$buy}.buyer.idcode,$buyers.{$buy}.buyer.sector.knownname,$Cargo.{$ware}.transporttag]" context="false" filter="scripts" chance="@$TaterDebugChance * 100"/>
									</do_else>
								</do_if>
							</do_all>
						</do_if>
						<remove_value name="$buyers"/>
					</do_all>
				</do_all>
				<do_if value="$buyoffers.count" min="1">
					<set_value name="$Grofit" exact="0"/>
					<set_value name="$GrofitFound" exact="false"/>
					<!-- 20240422 Shuffle Wares -->
					<shuffle_list list="$buyoffers"/>
					<sort_list list="$buyoffers" sortbyvalue="loop.element.relativeprice" sortdescending="true"/>
					<do_if value="$buyoffers.count gt 5">
						<resize_list list="$buyoffers" count="5"/>
					</do_if>
					<!-- Checking 5 best offers -->
					<do_all exact="$buyoffers.count" counter="$buy">
						<set_value name="$buyoffer" exact="$buyoffers.{$buy}"/>
						<set_value name="$checkdeal" exact="true"/>
						<!-- Deal Is no longer available. -->
						<do_if value="not $buyoffer.available">
							<set_value name="$checkdeal" exact="false"/>
						</do_if>
						<do_if value="$checkdeal">
							<set_value name="$buycost" exact="$buyoffer.unitprice/100"/>
							<set_value name="$Amount" exact="[this.assignedcontrolled.cargo.{$buyoffer.ware}.count,$buyoffer.amount].min"/>
							<set_value name="$distancescale" exact="1"/>
							<set_value name="$distance" exact="if $playerowned then this.assignedcontrolled.gatedistance.{$buyoffer.buyer}.{$blacklistgroup}.{this.assignedcontrolled} else this.assignedcontrolled.gatedistance.{$buyoffer.buyer}"/>
							<do_if value="$distancecheck">
								<do_if value="$distance ge 0">
									<set_value name="$distancescale" exact="(1.0 - $distancecheckpercent / 100.0) ^ $distance"/>
								</do_if>
								<!-- Distance is -1 if there is no safe route -->
								<do_else>
									<set_value name="$distancescale" exact="0"/>
								</do_else>
							</do_if>
							<set_value name="$totalearned" exact="$distancescale*($Amount)f*($buycost)f"/>
							<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Buy Offer for: %s at %s -- Amount: %s -- Desired Amount: %s -- Offer Amount: %s -- Stock: %s -- Profit: %s -- Payout:%s -- Distance: %s -- Distance Scale: %s -- Scaled: %s -- Highest Grofit: %s -- Available: %s -- Restricted: %s -- MinAmount: %s -- Free Space: %s'.[player.age,$buyoffer.ware,$buyoffer.buyer.knownname,$Amount,$buyoffer.desiredamount,$buyoffer.offeramount,$buyoffer.stocklevel,$Amount*$buycost,$buycost,$distance,$distancescale,$totalearned,$Grofit,$buyoffer.available,$buyoffer.restriction.factions.count,$buyoffer.minamount,$buyoffer.buyer.cargo.{$buyoffer.ware}.free]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
							<do_if value="$totalearned gt $Grofit">
								<!-- is it a better deal then the last check? -->
								<set_value name="$Grofit" exact="$totalearned"/>
								<set_value name="$GrofferBuy" exact="$buyoffer"/>
								<set_value name="$Gromount" exact="$Amount"/>
								<set_value name="$GrofitFound" exact="true"/>
							</do_if>
						</do_if>
						<set_value name="$scantick" exact="1" operation="add"/>
						<do_if value="$scantick gt $scantickrate">
							<set_value name="$scantick" exact="0"/>
							<wait exact="1ms"/>
						</do_if>
					</do_all>
					<!-- 20231209 print out time taken to sell cargo -->
					<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Time spent checking SellCargo: %s -- Time spent in queue: %s'.[player.age,(player.age - $SellCargoStartTime - $TotalQueueTime),$TotalQueueTime]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
					<do_if value="$GrofitFound">
						<do_if value="$GrofferBuy">
							<do_if value="@$TaterDebugChance">
								<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Selling %s %s for %s at %s DealAvailiability: %s'.[player.age,$Gromount,$GrofferBuy.ware,$GrofferBuy.unitprice/100,$GrofferBuy.buyer.knownname,$GrofferBuy.available]" output="false" append="true"/>
								<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Creating Trade Offer after %s.'.[player.age,(player.age-$starttime)s]" output="false" append="true"/>
							</do_if>
							<write_to_logbook category="upkeep" title="'DeadTater: '+this.assignedcontrolled.knownname+' ( '+this.assignedcontrolled.idcode+' )'" interaction="showonmap" object="this.assignedcontrolled" bonus="$Gromount*$GrofferBuy.unitprice" text="{3282837,201}.[$Gromount,$GrofferBuy.ware,$GrofferBuy.unitprice/100,$Gromount*$GrofferBuy.unitprice/100]" chance="if @$enablelogbook then ($enablelogbook * 100) else (0)"/>
							<create_trade_order name="$GrofferBuy" object="this.object" tradeoffer="$GrofferBuy" amount="$Gromount" immediate="true"/>
							<wait exact="1ms"/>
							<resume label="afterdealsetup"/>
						</do_if>
					</do_if>
				</do_if>
				<remove_value name="$buyoffers"/>
			</do_if>
			<!-- Skip ware selection logic if $autowares != true and $warebasket.count gt 0-->
			<do_if value="(not $autowares) and ($warebasket.count gt 0)">
				<resume label="combinewarelists"/>
			</do_if>
			<!-- Auto ware logic -->
			<label name="autowares"/>
			<!-- what storage type do we have -->
			<set_value name="$Container" exact="this.assignedcontrolled.cargo.capacity.container"/>
			<set_value name="$Solid" exact="this.assignedcontrolled.cargo.capacity.solid"/>
			<set_value name="$Liquid" exact="this.assignedcontrolled.cargo.capacity.liquid"/>
			<set_value name="$Universal" exact="this.assignedcontrolled.cargo.capacity.universal"/>
			<set_value name="$autowareslist" exact="[]"/>
			<do_if value="$Container or $Universal">
				<get_ware_definition result="$autocontainerwareslist" flags="economy" tags="tag.container"/>
				<append_list_elements name="$autowareslist" other="$autocontainerwareslist"/>
				<remove_value name="$autocontainerwareslist"/>
			</do_if>
			<do_if value="$Solid or $Universal">
				<get_ware_definition result="$autosolidwareslist" flags="economy" tags="tag.solid"/>
				<append_list_elements name="$autowareslist" other="$autosolidwareslist"/>
				<remove_value name="$autosolidwareslist"/>
			</do_if>
			<do_if value="$Liquid or $Universal">
				<get_ware_definition result="$autoliquidwareslist" flags="economy" tags="tag.liquid"/>
				<append_list_elements name="$autowareslist" other="$autoliquidwareslist"/>
				<remove_value name="$autoliquidwareslist"/>
			</do_if>
			<remove_value name="$Container"/>
			<remove_value name="$Solid"/>
			<remove_value name="$Liquid"/>
			<remove_value name="$Universal"/>
			<label name="illegalwares"/>
			<!-- might be able to handle in the find trade offer
			<get_wares_illegal_to result="$illegalwares" faction="$factionsinrange"/> -->
			<label name="combinewarelists"/>
			<set_value name="$usedwarebasket" exact="[]"/>
			<do_if value="$warebasket.count" min="1">
				<append_list_elements name="$usedwarebasket" other="$warebasket"/>
			</do_if>
			<do_if value="$autowares and ($autowareslist.count gt 0)">
				<do_all exact="$autowareslist.count" counter="$autowareslistcounter">
					<do_if value="not $usedwarebasket.indexof.{$autowareslist.{$autowareslistcounter}}">
						<append_to_list name="$usedwarebasket" exact="$autowareslist.{$autowareslistcounter}"/>
					</do_if>
				</do_all>
			</do_if>
			<label name="start"/>
			<set_command command="command.searchtrades"/>
			<set_command_action commandaction="commandaction.searchingtrades"/>
			<do_if value="this.assignedcontrolled.hasownaccount and not this.assignedcontrolled.tradeorders.count">
				<remove_object_account object="this.assignedcontrolled" transfer="true"/>
			</do_if>
			<do_if value="(not $usedwarebasket?) or (@$usedwarebasket.count le 0)">
				<do_if value="(not $warebasketerror?) or (@$warebasketerror == false)">
					<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'\nMOD: DeadTater -- %s -- No Wares Detected! Resetting to start!'.[player.age]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
					<set_value name="$warebasketerror" exact="true"/>
					<wait exact="2s"/>
					<resume label="beginning"/>
				</do_if>
				<do_elseif value="@$warebasketerror == true">
					<resume label="afterdealsetup"/>
				</do_elseif>
			</do_if>
			<do_else>
				<set_value name="$warebasketerror" exact="false"/>
			</do_else>
			<!-- Prefer own faction -->
			<label name="preferownfaction"/>
			<do_if value="@$preferownfaction != true">
				<resume label="preferownsell"/>
			</do_if>
			<!-- 20231209 track time to preferownfaction -->
			<set_value name="$PreferOwnFactionStartTime" exact="player.age"/>
			<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Searching for my faction trade deals'.[player.age]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
			<set_value name="$Grofit" exact="0"/>
			<set_value name="$GrofitFound" exact="false"/>
			<wait exact="1ms"/>
			<do_if value="(not $usequeue?) or @$usequeue">
				<!-- 20240708 // TRADELOGIC QUEUE // preferownfaction -->
				<do_if value="global.$DATaterQueueTable.$TradeLogicQueue.{this.assignedcontrolled.trueowner}?">
					<append_to_list name="global.$DATaterQueueTable.$TradeLogicQueue.{this.assignedcontrolled.trueowner}" exact="this.assignedcontrolled" unique="true"/>
				</do_if>
				<do_else>
					<append_to_list name="global.$DATaterQueueTable.$TradeLogicQueue.{this.assignedcontrolled.trueowner}" exact="this.assignedcontrolled" unique="true" create="true"/>
				</do_else>
				<do_if value="not global.$DATaterQueueTable.$FactionTradeLogicQueue.indexof.{this.assignedcontrolled.trueowner}">
					<append_to_list name="global.$DATaterQueueTable.$FactionTradeLogicQueue" exact="this.assignedcontrolled.trueowner" unique="true"/>
				</do_if>
				<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Queued up for trade -- Spot in queue %s / %s'.[player.age,global.$DATaterQueueTable.$TradeLogicQueue.{this.assignedcontrolled.trueowner}.indexof.{this.assignedcontrolled},global.$DATaterQueueTable.$TradeLogicQueue.{this.assignedcontrolled.trueowner}.count]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
				<set_value name="$ExpectedDelay" exact="[(global.$DATaterQueueTable.$TradeLogicQueue.{this.assignedcontrolled.trueowner}.indexof.{this.assignedcontrolled} * 6)s,60s].max"/>
				<wait>
					<interrupt>
						<conditions>
							<event_object_signalled object="this.assignedcontrolled" param="'DeadTaterProceed'"/>
						</conditions>
						<actions>
							<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Received signal to proceed'.[player.age]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
						</actions>
					</interrupt>
					<interrupt_after_time time="$ExpectedDelay"/>
				</wait>
			</do_if>
			<set_value name="$TotalQueueTime" exact="player.age - $PreferOwnFactionStartTime"/>
			<remove_value name="$ExpectedDelay"/>
			<!-- 20240421 // QUEUE END // preferownfaction -->
			<!-- 20240422 Shuffle Wares -->
			<shuffle_list list="$usedwarebasket"/>
			<do_all exact="$usedwarebasket.count" counter="$ware">
				<!-- First grab the offers for the ware from all the sectors in range.. -->
				<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Checking offers for ware: %s'.[player.age,$usedwarebasket.{$ware}]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
				<set_value name="$buyoffers" exact="[]"/>
				<do_all exact="$sellspaces.count" counter="$sector">
					<!-- sector is policed, ware is illegal to policefaction, my faction is not police faction, $illegalwares is false -->
					<do_if value="((not (($sellspaces.{$sector}.policefaction) and ($usedwarebasket.{$ware}.illegalto.{$sellspaces.{$sector}.policefaction}.{this.trueowner}) and ($sellspaces.{$sector}.policefaction != this.trueowner))) and (not $usedwarebasket.{$ware}.illegalto.{this.trueowner}.{null})) or $illegalwares">
						<do_if value="$minfill">
							<do_if value="$usedwarebasket.{$ware}.waretransport == waretransport.container">
								<set_value name="$currentminfill" exact="((this.assignedcontrolled.cargo.free.container + this.assignedcontrolled.cargo.free.universal) * ($minfillpercent / 100.0))i"/>
								<set_value name="$currentmaxfill" exact="this.assignedcontrolled.cargo.free.container + this.assignedcontrolled.cargo.free.universal"/>
							</do_if>
							<do_elseif value="$usedwarebasket.{$ware}.waretransport == waretransport.solid">
								<set_value name="$currentminfill" exact="((this.assignedcontrolled.cargo.free.solid + this.assignedcontrolled.cargo.free.universal) * ($minfillpercent / 100.0))i"/>
								<set_value name="$currentmaxfill" exact="this.assignedcontrolled.cargo.free.solid + this.assignedcontrolled.cargo.free.universal"/>
							</do_elseif>
							<do_elseif value="$usedwarebasket.{$ware}.waretransport == waretransport.liquid">
								<set_value name="$currentminfill" exact="((this.assignedcontrolled.cargo.free.liquid + this.assignedcontrolled.cargo.free.universal) * ($minfillpercent / 100.0))i"/>
								<set_value name="$currentmaxfill" exact="this.assignedcontrolled.cargo.free.liquid + this.assignedcontrolled.cargo.free.universal"/>
							</do_elseif>
							<do_else>
								<!-- Should never reach here -->
								<set_value name="$currentminfill" exact="1"/>
							</do_else>
							<find_buy_offer tradepartner="this.assignedcontrolled" space="$sellspaces.{$sector}" result="$buyers" multiple="true" wares="$usedwarebasket.{$ware}">
								<!-- <offervolume min="$currentminfill" tradepartner="this.assignedcontrolled"/> -->
								<totalvolume min="$currentminfill"/>
								<mintotalvolume max="$currentmaxfill"/>
								<match_buyer owner="this.trueowner">
									<match_content checkoperational="true">
										<match_dock size="this.assignedcontrolled.docksize" trading="true"/>
									</match_content>
									<match_relation_to object="this.assignedcontrolled" relation="dock" comparison="ge"/>
									<match tradesknownto="this.owner"/>
									<match_use_blacklist group="$blacklistgroup" type="blacklisttype.objectactivity" object="this.assignedcontrolled"/>
								</match_buyer>
							</find_buy_offer>
						</do_if>
						<do_else>
							<find_buy_offer tradepartner="this.assignedcontrolled" space="$sellspaces.{$sector}" result="$buyers" multiple="true" wares="$usedwarebasket.{$ware}">
								<match_buyer owner="this.trueowner">
									<match_content checkoperational="true">
										<match_dock size="this.assignedcontrolled.docksize" trading="true"/>
									</match_content>
									<match_relation_to object="this.assignedcontrolled" relation="dock" comparison="ge"/>
									<match tradesknownto="this.owner"/>
									<match_use_blacklist group="$blacklistgroup" type="blacklisttype.objectactivity" object="this.assignedcontrolled"/>
								</match_buyer>
							</find_buy_offer>
						</do_else>
					</do_if>
					<set_value name="$scantick" exact="1" operation="add"/>
					<do_if value="$scantick gt $scantickrate">
						<set_value name="$scantick" exact="0"/>
						<wait exact="1ms"/>
					</do_if>
					<do_if value="@$buyers.count">
						<do_all exact="$buyers.count" counter="$buy">
							<!-- 20241002 Updating $ignoreshipbuyers code -->
							<do_if value="(not $ignoreshipbuyers) or ($ignoreshipbuyers and (not $buyers.{$buy}.buyer.isclass.ship))">
								<!-- 20241002 Implementing fix for stations with no storage -->
								<do_if value="$buyers.{$buy}.buyer.cargo.{$usedwarebasket.{$ware}}.free">
									<append_to_list name="$buyoffers" exact="$buyers.{$buy}"/>
								</do_if>
								<do_else>
									<debug_text text="'MOD: DeadTater -- %s(%s) -- Skipping offer from: %s(%s) in %s -- No cargo capacity for type: %s'.[this.assignedcontrolled.name,this.assignedcontrolled.idcode,$buyers.{$buy}.buyer.knownname,$buyers.{$buy}.buyer.idcode,$buyers.{$buy}.buyer.sector.knownname,$usedwarebasket.{$ware}.transporttag]" context="false" filter="scripts" chance="@$TaterDebugChance * 100"/>
								</do_else>
							</do_if>
						</do_all>
					</do_if>
					<remove_value name="$buyers"/>
				</do_all>
				<set_value name="$selloffers" exact="[]"/>
				<do_if value="$buyoffers.count">
					<do_all exact="$buyspaces.count" counter="$sector">
						<!-- sector is policed, ware is illegal to policefaction, my faction is not police faction, $illegalwares is false -->
						<do_if value="((not (($buyspaces.{$sector}.policefaction) and ($usedwarebasket.{$ware}.illegalto.{$buyspaces.{$sector}.policefaction}.{this.trueowner}) and ($buyspaces.{$sector}.policefaction != this.trueowner))) and (not $usedwarebasket.{$ware}.illegalto.{this.trueowner}.{null})) or $illegalwares">
							<do_if value="$minfill">
								<do_if value="$usedwarebasket.{$ware}.waretransport == waretransport.container">
									<set_value name="$currentminfill" exact="((this.assignedcontrolled.cargo.free.container + this.assignedcontrolled.cargo.free.universal) * ($minfillpercent / 100.0))i"/>
									<set_value name="$currentmaxfill" exact="this.assignedcontrolled.cargo.free.container + this.assignedcontrolled.cargo.free.universal"/>
								</do_if>
								<do_elseif value="$usedwarebasket.{$ware}.waretransport == waretransport.solid">
									<set_value name="$currentminfill" exact="((this.assignedcontrolled.cargo.free.solid + this.assignedcontrolled.cargo.free.universal) * ($minfillpercent / 100.0))i"/>
									<set_value name="$currentmaxfill" exact="this.assignedcontrolled.cargo.free.solid + this.assignedcontrolled.cargo.free.universal"/>
								</do_elseif>
								<do_elseif value="$usedwarebasket.{$ware}.waretransport == waretransport.liquid">
									<set_value name="$currentminfill" exact="((this.assignedcontrolled.cargo.free.liquid + this.assignedcontrolled.cargo.free.universal) * ($minfillpercent / 100.0))i"/>
									<set_value name="$currentmaxfill" exact="this.assignedcontrolled.cargo.free.liquid + this.assignedcontrolled.cargo.free.universal"/>
								</do_elseif>
								<do_else>
									<!-- Should never reach here -->
									<set_value name="$currentminfill" exact="1"/>
								</do_else>
								<find_sell_offer tradepartner="this.assignedcontrolled" space="$buyspaces.{$sector}" result="$sellers" multiple="true" wares="$usedwarebasket.{$ware}">
									<!-- <offervolume min="$currentminfill" tradepartner="this.assignedcontrolled"/> -->
									<totalvolume min="$currentminfill"/>
									<mintotalvolume max="$currentmaxfill"/>
									<match_seller owner="this.trueowner">
										<match_content checkoperational="true">
											<match_dock size="this.assignedcontrolled.docksize" trading="true"/>
										</match_content>
										<match_relation_to object="this.assignedcontrolled" relation="dock" comparison="ge"/>
										<match tradesknownto="this.owner"/>
										<match_use_blacklist group="$blacklistgroup" type="blacklisttype.objectactivity" object="this.assignedcontrolled"/>
									</match_seller>
								</find_sell_offer>
							</do_if>
							<do_else>
								<find_sell_offer tradepartner="this.assignedcontrolled" space="$buyspaces.{$sector}" result="$sellers" multiple="true" wares="$usedwarebasket.{$ware}">
									<match_seller owner="this.trueowner">
										<match_content checkoperational="true">
											<match_dock size="this.assignedcontrolled.docksize" trading="true"/>
										</match_content>
										<match_relation_to object="this.assignedcontrolled" relation="dock" comparison="ge"/>
										<match tradesknownto="this.owner"/>
										<match_use_blacklist group="$blacklistgroup" type="blacklisttype.objectactivity" object="this.assignedcontrolled"/>
									</match_seller>
								</find_sell_offer>
							</do_else>
						</do_if>
						<set_value name="$scantick" exact="1" operation="add"/>
						<do_if value="$scantick gt $scantickrate">
							<set_value name="$scantick" exact="0"/>
							<wait exact="1ms"/>
						</do_if>
						<do_if value="@$sellers.count">
							<do_all exact="$sellers.count" counter="$sell">
								<!-- 20240317 At the moment, ships cannot sell goods but this should future proof it. -->
								<!-- 20241002 Updating $ignoreshipbuyers code -->
								<do_if value="(not $ignoreshipbuyers) or ($ignoreshipbuyers and (not $sellers.{$sell}.seller.isclass.ship))">
									<append_to_list name="$selloffers" exact="$sellers.{$sell}"/>
								</do_if>
							</do_all>
						</do_if>
						<remove_value name="$sellers"/>
					</do_all>
				</do_if>
				<!-- Are there any possible deals withen our search area? -->
				<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- I found these offers nearby, Buy: %s Sell: %s'.[player.age,$buyoffers.count,$selloffers.count]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
				<do_if value="$buyoffers.count and $selloffers.count">
					<!-- Now we compare the offers and try to get a decent deal -->
					<!-- 20240422 Shuffle Wares -->
					<shuffle_list list="$buyoffers"/>
					<sort_list list="$buyoffers" sortbyvalue="loop.element.relativeprice" sortdescending="true" comment="highest relative price to lowest"/>
					<do_if value="$buyoffers.count gt 5">
						<resize_list list="$buyoffers" count="5"/>
					</do_if>
					<!-- 20240422 Shuffle Wares -->
					<shuffle_list list="$selloffers"/>
					<sort_list list="$selloffers" sortbyvalue="loop.element.relativeprice" sortdescending="false" comment="lowest relative price to highest"/>
					<do_if value="$selloffers.count gt 5">
						<resize_list list="$selloffers" count="5"/>
					</do_if>
					<do_all exact="$buyoffers.count" counter="$buy">
						<set_value name="$buyoffer" exact="$buyoffers.{$buy}"/>
						<do_if value="$buyoffer.available">
							<set_value name="$buycost" exact="$buyoffer.unitprice/100"/>
							<do_if value="($buycost == 0) or ($buyoffer.buyer.owner == this.assignedcontrolled.owner)">
								<set_value name="$buycost" exact="$buyoffer.unitprice/100"/>
							</do_if>
							<do_if value="$TaterDebugChance">
								<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'Scanning Buy Offer,Ware:,(%s),Buyer:,%s(%s)(%s),Price:,%s,RelativePrice:,%s,QuantityFactor:,%s,Gate Distance:,%s,Raw Distance:,%s'.[$buyoffer.ware,$buyoffer.buyer.knownname,$buyoffer.buyer.idcode,$buyoffer.buyer.trueowner,$buycost,$buyoffer.relativeprice,$buyoffer.quantityfactor,this.assignedcontrolled.gatedistance.{$buyoffer.buyer}.{$blacklistgroup}.{this.assignedcontrolled},this.assignedcontrolled.distanceto.{$buyoffer.buyer}]" output="false" append="true"/>
							</do_if>
							<do_all exact="$selloffers.count" counter="$sell">
								<set_value name="$selloffer" exact="$selloffers.{$sell}"/>
								<do_if value="$selloffer.available">
									<set_value name="$sellcost" exact="$selloffer.unitprice / 100"/>
									<set_value name="$Amount" exact="[this.assignedcontrolled.cargo.{$buyoffer.ware}.free,$buyoffer.amount,$selloffer.amount].min"/>
									<!-- 20240422 Buying from our own station means we can ignore the 50% spending limit -->
									<!-- 20240422 Removing old $spendablemoney since the value is unnecessary -->
									<remove_value name="$spendablemoney"/>
									<set_value name="$CheckGrofit" exact="false"/>
									<do_if value="(not $ignoretraderules) and (($selloffer.seller.trueowner == this.assignedcontrolled.trueowner) or ($buyoffer.buyer.trueowner == this.assignedcontrolled.trueowner)) and ($playerowned) and (not ($selloffer.seller.trueowner == $buyoffer.buyer.trueowner))">
										<!-- We're dealing with one of our owners stations, take special care here. -->
										<!-- Try to allow trade between owned stations regardless of restriction. -->
										<!-- if tradeoffer.restriction.inverted == 1, then the list returned by tradeoffer.restriction.factions is a blacklist. -->
										<!-- This corresponds to leaving "restrict all factions" blank in the trade rule UI -->
										<!-- if tradeoffer.restriction.inverted == 0, then the list returned by tradeoffer.restriction.factions is a whitelist. -->
										<!-- This corresponds to checking the box for "restrict all factions" in the trade rule UI -->
										<do_if value="($selloffer.restriction.factions.count != 0 and $selloffer.restriction.factions != null) or ($buyoffer.restriction.factions.count != 0 and $buyoffer.restriction.factions != null)">
											<do_if value="($selloffer.restriction.factions.count != 0 and $selloffer.restriction.factions != null)">
												<set_value name="$CheckGrofit" exact="true"/>
												<do_if value="$selloffer.restriction.inverted == 1">
													<do_if value="($selloffer.restriction.factions.indexof.{$buyoffer.buyer.owner} gt 0)">
														<set_value name="$CheckGrofit" exact="false"/>
													</do_if>
												</do_if>
												<do_elseif value="$selloffer.restriction.inverted == 0">
													<do_if value="($selloffer.restriction.factions.indexof.{$buyoffer.buyer.owner} lt 1)">
														<set_value name="$CheckGrofit" exact="false"/>
													</do_if>
												</do_elseif>
											</do_if>
											<do_if value="($buyoffer.restriction.factions.count != 0 and $buyoffer.restriction.factions != null)">
												<set_value name="$CheckGrofit" exact="true"/>
												<do_if value="$buyoffer.restriction.inverted == 1">
													<do_if value="($buyoffer.restriction.factions.indexof.{$selloffer.seller.owner} gt 0)">
														<set_value name="$CheckGrofit" exact="false"/>
													</do_if>
												</do_if>
												<do_elseif value="$buyoffer.restriction.inverted == 0">
													<do_if value="($buyoffer.restriction.factions.indexof.{$selloffer.seller.owner} lt 1)">
														<set_value name="$CheckGrofit" exact="false"/>
													</do_if>
												</do_elseif>
											</do_if>
										</do_if>
										<do_else>
											<set_value name="$CheckGrofit" exact="true"/>
										</do_else>
									</do_if>
									<do_else>
										<!-- We arnt trading with a station our owner owns, no restrictions go! (Or maybe they dont care and allowed free trading for this ship.) -->
										<set_value name="$CheckGrofit" exact="true"/>
									</do_else>
									<set_value name="$distancescale" exact="1"/>
									<set_value name="$distance" exact="0"/>
									<do_if value="$distancecheck">
										<do_if value="$playerowned">
											<!-- Distance to seller -->
											<set_value name="$DistancetoSeller" exact="this.assignedcontrolled.gatedistance.{$selloffer.seller}.{$blacklistgroup}.{this.assignedcontrolled}"/>
											<!-- Distance from seller to buyer -->
											<set_value name="$DistancetoBuyer" exact="$selloffer.seller.gatedistance.{$buyoffer.buyer}.{$blacklistgroup}.{this.assignedcontrolled}"/>
											<do_if value="($DistancetoSeller ge 0) and ($DistancetoBuyer ge 0)">
												<set_value name="$distance" exact="$DistancetoSeller + $DistancetoBuyer"/>
											</do_if>
											<do_else>
												<set_value name="$distance" exact="-1"/>
											</do_else>
										</do_if>
										<do_else>
											<!-- Distance to seller -->
											<set_value name="$DistancetoSeller" exact="this.assignedcontrolled.gatedistance.{$selloffer.seller}"/>
											<!-- Distance from seller to buyer -->
											<set_value name="$DistancetoBuyer" exact="$selloffer.seller.gatedistance.{$buyoffer.buyer}"/>
											<do_if value="($DistancetoSeller ge 0) and ($DistancetoBuyer ge 0)">
												<set_value name="$distance" exact="$DistancetoSeller + $DistancetoBuyer"/>
											</do_if>
											<do_else>
												<set_value name="$distance" exact="-1"/>
											</do_else>
										</do_else>
										<!-- Distance is -1 if there is no safe route -->
										<do_if value="$distance ge 0">
											<set_value name="$distancescale" exact="(1.0 - $distancecheckpercent / 100.0) ^ $distance"/>
										</do_if>
										<do_else>
											<set_value name="$distancescale" exact="0"/>
										</do_else>
									</do_if>
									<!-- DeadTater, no you're not allowed to buy and sell to the same station. -->
									<do_if value="$buyoffer.buyer == $selloffer.seller">
										<set_value name="$CheckGrofit" exact="false"/>
									</do_if>
									<do_if value="$CheckGrofit">
										<!-- Use a variable inplace of just copy pasting the section below. -->
										<do_if value="$Grofit lt ($Amount * (($buycost - $sellcost)f * $distancescale)ct)">
											<do_if value="$TaterDebugChance">
												<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'Scanning Sell Offer,Ware:,(%s),Seller:,%s(%s)(%s),Price:,%s,RelativePrice:,%s,QuantityFactor:,%s,Gate Distance:,%s,Raw Distance:,%s,Distance Scale:,%s'.[$buyoffer.ware,$selloffer.seller.knownname,$selloffer.seller.idcode,$selloffer.seller.trueowner,$sellcost,$selloffer.relativeprice,$selloffer.quantityfactor,$distance,this.assignedcontrolled.distanceto.{$selloffer.seller} + $selloffer.seller.distanceto.{$buyoffer.buyer},$distancescale]" output="false" append="true"/>
												<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'Sell Offer Calculations,Ware:,(%s),,,Grofit:,%s,Amount:,%s,BuyPrice:,%s,SellPrice:,%s,UnitProfit:,%s'.[$buyoffer.ware,$Amount*($buycost-$sellcost),$Amount,$buycost,$sellcost,($buycost-$sellcost)]" output="false" append="true"/>
											</do_if>
											<set_value name="$Grofit" exact="$Amount*($buycost-$sellcost)"/>
											<set_value name="$GrofferSell" exact="$selloffer"/>
											<set_value name="$GrofferBuy" exact="$buyoffer"/>
											<set_value name="$Gromount" exact="$Amount"/>
											<set_value name="$GrofitFound" exact="true"/>
											<set_value name="$itemcostsell" exact="$sellcost"/>
											<set_value name="$itemcostbuy" exact="$buycost"/>
										</do_if>
									</do_if>
								</do_if>
								<set_value name="$scantick" exact="1" operation="add"/>
								<do_if value="$scantick gt $scantickrate">
									<set_value name="$scantick" exact="0"/>
									<wait exact="1ms"/>
								</do_if>
							</do_all>
						</do_if>
					</do_all>
				</do_if>
			</do_all>
			<!-- 20231209 print out time taken to check preferownfaction -->
			<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Time spent checking preferownfaction: %s -- Time spent in queue: %s'.[player.age,(player.age - $PreferOwnFactionStartTime - $TotalQueueTime),$TotalQueueTime]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
			<do_if value="@$GrofitFound">
				<resume label="setupdeals"/>
			</do_if>
			<!-- 20240317 Start of preferownfactionsell -->
			<!-- Prefer selling to own stations. Station BUY offers MUST be this.trueowner -->
			<label name="preferownsell"/>
			<do_if value="@$preferownfactionsell != true">
				<resume label="preferownbuy"/>
			</do_if>
			<set_value name="$PreferOwnFactionSellStartTime" exact="player.age"/>
			<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Searching for preferownfactionsell trade deals'.[player.age]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
			<set_value name="$Grofit" exact="0"/>
			<set_value name="$GrofitFound" exact="false"/>
			<wait exact="1ms"/>
			<do_if value="(not $usequeue?) or @$usequeue">
				<!-- 20240708 // TRADELOGIC QUEUE // preferownsell -->
				<do_if value="global.$DATaterQueueTable.$TradeLogicQueue.{this.assignedcontrolled.trueowner}?">
					<append_to_list name="global.$DATaterQueueTable.$TradeLogicQueue.{this.assignedcontrolled.trueowner}" exact="this.assignedcontrolled" unique="true"/>
				</do_if>
				<do_else>
					<append_to_list name="global.$DATaterQueueTable.$TradeLogicQueue.{this.assignedcontrolled.trueowner}" exact="this.assignedcontrolled" unique="true" create="true"/>
				</do_else>
				<do_if value="not global.$DATaterQueueTable.$FactionTradeLogicQueue.indexof.{this.assignedcontrolled.trueowner}">
					<append_to_list name="global.$DATaterQueueTable.$FactionTradeLogicQueue" exact="this.assignedcontrolled.trueowner" unique="true"/>
				</do_if>
				<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Queued up for trade -- Spot in queue %s / %s'.[player.age,global.$DATaterQueueTable.$TradeLogicQueue.{this.assignedcontrolled.trueowner}.indexof.{this.assignedcontrolled},global.$DATaterQueueTable.$TradeLogicQueue.{this.assignedcontrolled.trueowner}.count]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
				<set_value name="$ExpectedDelay" exact="[(global.$DATaterQueueTable.$TradeLogicQueue.{this.assignedcontrolled.trueowner}.indexof.{this.assignedcontrolled} * 6)s,60s].max"/>
				<wait>
					<interrupt>
						<conditions>
							<event_object_signalled object="this.assignedcontrolled" param="'DeadTaterProceed'"/>
						</conditions>
						<actions>
							<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Received signal to proceed'.[player.age]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
						</actions>
					</interrupt>
					<interrupt_after_time time="$ExpectedDelay"/>
				</wait>
			</do_if>
			<set_value name="$TotalQueueTime" exact="player.age - $PreferOwnFactionSellStartTime"/>
			<remove_value name="$ExpectedDelay"/>
			<!-- 20240421 // QUEUE END // preferownsell -->
			<!-- 20240422 Shuffle Wares -->
			<shuffle_list list="$usedwarebasket"/>
			<do_all exact="$usedwarebasket.count" counter="$ware">
				<!-- First grab the offers for the ware from all the sectors in range.. -->
				<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Checking offers for ware: %s'.[player.age,$usedwarebasket.{$ware}]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
				<set_value name="$buyoffers" exact="[]"/>
				<do_all exact="$sellspaces.count" counter="$sector">
					<!-- sector is policed, ware is illegal to policefaction, my faction is not police faction, $illegalwares is false -->
					<do_if value="((not (($sellspaces.{$sector}.policefaction) and ($usedwarebasket.{$ware}.illegalto.{$sellspaces.{$sector}.policefaction}.{this.trueowner}) and ($sellspaces.{$sector}.policefaction != this.trueowner))) and (not $usedwarebasket.{$ware}.illegalto.{this.trueowner}.{null})) or $illegalwares">
						<do_if value="$minfill">
							<do_if value="$usedwarebasket.{$ware}.waretransport == waretransport.container">
								<set_value name="$currentminfill" exact="((this.assignedcontrolled.cargo.free.container + this.assignedcontrolled.cargo.free.universal) * ($minfillpercent / 100.0))i"/>
								<set_value name="$currentmaxfill" exact="this.assignedcontrolled.cargo.free.container + this.assignedcontrolled.cargo.free.universal"/>
							</do_if>
							<do_elseif value="$usedwarebasket.{$ware}.waretransport == waretransport.solid">
								<set_value name="$currentminfill" exact="((this.assignedcontrolled.cargo.free.solid + this.assignedcontrolled.cargo.free.universal) * ($minfillpercent / 100.0))i"/>
								<set_value name="$currentmaxfill" exact="this.assignedcontrolled.cargo.free.solid + this.assignedcontrolled.cargo.free.universal"/>
							</do_elseif>
							<do_elseif value="$usedwarebasket.{$ware}.waretransport == waretransport.liquid">
								<set_value name="$currentminfill" exact="((this.assignedcontrolled.cargo.free.liquid + this.assignedcontrolled.cargo.free.universal) * ($minfillpercent / 100.0))i"/>
								<set_value name="$currentmaxfill" exact="this.assignedcontrolled.cargo.free.liquid + this.assignedcontrolled.cargo.free.universal"/>
							</do_elseif>
							<do_else>
								<!-- Should never reach here -->
								<set_value name="$currentminfill" exact="1"/>
							</do_else>
							<find_buy_offer tradepartner="this.assignedcontrolled" space="$sellspaces.{$sector}" result="$buyers" multiple="true" wares="$usedwarebasket.{$ware}">
								<totalvolume min="$currentminfill"/>
								<mintotalvolume max="$currentmaxfill"/>
								<match_buyer owner="this.trueowner">
									<match_content checkoperational="true">
										<match_dock size="this.assignedcontrolled.docksize" trading="true"/>
									</match_content>
									<match_relation_to object="this.assignedcontrolled" relation="dock" comparison="ge"/>
									<match tradesknownto="this.owner"/>
									<match_use_blacklist group="$blacklistgroup" type="blacklisttype.objectactivity" object="this.assignedcontrolled"/>
								</match_buyer>
							</find_buy_offer>
						</do_if>
						<do_else>
							<find_buy_offer tradepartner="this.assignedcontrolled" space="$sellspaces.{$sector}" result="$buyers" multiple="true" wares="$usedwarebasket.{$ware}">
								<match_buyer owner="this.trueowner">
									<match_content checkoperational="true">
										<match_dock size="this.assignedcontrolled.docksize" trading="true"/>
									</match_content>
									<match_relation_to object="this.assignedcontrolled" relation="dock" comparison="ge"/>
									<match tradesknownto="this.owner"/>
									<match_use_blacklist group="$blacklistgroup" type="blacklisttype.objectactivity" object="this.assignedcontrolled"/>
								</match_buyer>
							</find_buy_offer>
						</do_else>
					</do_if>
					<set_value name="$scantick" exact="1" operation="add"/>
					<do_if value="$scantick gt $scantickrate">
						<set_value name="$scantick" exact="0"/>
						<wait exact="1ms"/>
					</do_if>
					<do_if value="@$buyers.count">
						<do_all exact="$buyers.count" counter="$buy">
							<!-- 20240317 ignoreshipbuyers filtering was missing from freetrade section. FIXED -->
							<!-- 20241002 Updating $ignoreshipbuyers code -->
							<do_if value="(not $ignoreshipbuyers) or ($ignoreshipbuyers and (not $buyers.{$buy}.buyer.isclass.ship))">
								<!-- 20241002 Implementing fix for stations with no storage -->
								<do_if value="$buyers.{$buy}.buyer.cargo.{$usedwarebasket.{$ware}}.free">
									<append_to_list name="$buyoffers" exact="$buyers.{$buy}"/>
								</do_if>
								<do_else>
									<debug_text text="'MOD: DeadTater -- %s(%s) -- Skipping offer from: %s(%s) in %s -- No cargo capacity for type: %s'.[this.assignedcontrolled.name,this.assignedcontrolled.idcode,$buyers.{$buy}.buyer.knownname,$buyers.{$buy}.buyer.idcode,$buyers.{$buy}.buyer.sector.knownname,$usedwarebasket.{$ware}.transporttag]" context="false" filter="scripts" chance="@$TaterDebugChance * 100"/>
								</do_else>
							</do_if>
						</do_all>
					</do_if>
					<remove_value name="$buyers"/>
				</do_all>
				<set_value name="$selloffers" exact="[]"/>
				<do_if value="$buyoffers.count">
					<do_all exact="$buyspaces.count" counter="$sector">
						<!-- sector is policed, ware is illegal to policefaction, my faction is not police faction, $illegalwares is false -->
						<do_if value="((not (($buyspaces.{$sector}.policefaction) and ($usedwarebasket.{$ware}.illegalto.{$buyspaces.{$sector}.policefaction}.{this.trueowner}) and ($buyspaces.{$sector}.policefaction != this.trueowner))) and (not $usedwarebasket.{$ware}.illegalto.{this.trueowner}.{null})) or $illegalwares">
							<do_if value="$minfill">
								<do_if value="$usedwarebasket.{$ware}.waretransport == waretransport.container">
									<set_value name="$currentminfill" exact="((this.assignedcontrolled.cargo.free.container + this.assignedcontrolled.cargo.free.universal) * ($minfillpercent / 100.0))i"/>
									<set_value name="$currentmaxfill" exact="this.assignedcontrolled.cargo.free.container + this.assignedcontrolled.cargo.free.universal"/>
								</do_if>
								<do_elseif value="$usedwarebasket.{$ware}.waretransport == waretransport.solid">
									<set_value name="$currentminfill" exact="((this.assignedcontrolled.cargo.free.solid + this.assignedcontrolled.cargo.free.universal) * ($minfillpercent / 100.0))i"/>
									<set_value name="$currentmaxfill" exact="this.assignedcontrolled.cargo.free.solid + this.assignedcontrolled.cargo.free.universal"/>
								</do_elseif>
								<do_elseif value="$usedwarebasket.{$ware}.waretransport == waretransport.liquid">
									<set_value name="$currentminfill" exact="((this.assignedcontrolled.cargo.free.liquid + this.assignedcontrolled.cargo.free.universal) * ($minfillpercent / 100.0))i"/>
									<set_value name="$currentmaxfill" exact="this.assignedcontrolled.cargo.free.liquid + this.assignedcontrolled.cargo.free.universal"/>
								</do_elseif>
								<do_else>
									<!-- Should never reach here -->
									<set_value name="$currentminfill" exact="1"/>
								</do_else>
								<find_sell_offer tradepartner="this.assignedcontrolled" space="$buyspaces.{$sector}" result="$sellers" multiple="true" wares="$usedwarebasket.{$ware}">
									<!-- <offervolume min="$currentminfill" tradepartner="this.assignedcontrolled"/> -->
									<totalvolume min="$currentminfill"/>
									<mintotalvolume max="$currentmaxfill"/>
									<match_seller>
										<match_content checkoperational="true">
											<match_dock size="this.assignedcontrolled.docksize" trading="true"/>
										</match_content>
										<match_relation_to object="this.assignedcontrolled" relation="dock" comparison="ge"/>
										<match tradesknownto="this.owner"/>
										<match_use_blacklist group="$blacklistgroup" type="blacklisttype.objectactivity" object="this.assignedcontrolled"/>
									</match_seller>
								</find_sell_offer>
							</do_if>
							<do_else>
								<find_sell_offer tradepartner="this.assignedcontrolled" space="$buyspaces.{$sector}" result="$sellers" multiple="true" wares="$usedwarebasket.{$ware}">
									<match_seller>
										<match_content checkoperational="true">
											<match_dock size="this.assignedcontrolled.docksize" trading="true"/>
										</match_content>
										<match_relation_to object="this.assignedcontrolled" relation="dock" comparison="ge"/>
										<match tradesknownto="this.owner"/>
										<match_use_blacklist group="$blacklistgroup" type="blacklisttype.objectactivity" object="this.assignedcontrolled"/>
									</match_seller>
								</find_sell_offer>
							</do_else>
						</do_if>
						<set_value name="$scantick" exact="1" operation="add"/>
						<do_if value="$scantick gt $scantickrate">
							<set_value name="$scantick" exact="0"/>
							<wait exact="1ms"/>
						</do_if>
						<do_if value="@$sellers.count">
							<do_all exact="$sellers.count" counter="$sell">
								<!-- 20240317 At the moment, ships cannot sell goods but this should future proof it. -->
								<!-- 20241002 Updating $ignoreshipbuyers code -->
								<do_if value="(not $ignoreshipbuyers) or ($ignoreshipbuyers and (not $sellers.{$sell}.seller.isclass.ship))">
									<append_to_list name="$selloffers" exact="$sellers.{$sell}"/>
								</do_if>
							</do_all>
						</do_if>
						<remove_value name="$sellers"/>
					</do_all>
				</do_if>
				<!-- Are there any possible deals withen our search area? -->
				<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- I found these offers nearby, Buy: %s Sell: %s'.[player.age,$buyoffers.count,$selloffers.count]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
				<do_if value="$buyoffers.count and $selloffers.count">
					<!-- Now we compare the offers and try to get a decent deal -->
					<!-- 20240422 Shuffle Wares -->
					<shuffle_list list="$buyoffers"/>
					<sort_list list="$buyoffers" sortbyvalue="loop.element.relativeprice" sortdescending="true" comment="highest relative price to lowest"/>
					<do_if value="$buyoffers.count gt 5">
						<resize_list list="$buyoffers" count="5"/>
					</do_if>
					<!-- 20240422 Shuffle Wares -->
					<shuffle_list list="$selloffers"/>
					<sort_list list="$selloffers" sortbyvalue="loop.element.relativeprice" sortdescending="false" comment="lowest relative price to highest"/>
					<do_if value="$selloffers.count gt 5">
						<resize_list list="$selloffers" count="5"/>
					</do_if>
					<do_all exact="$buyoffers.count" counter="$buy">
						<set_value name="$buyoffer" exact="$buyoffers.{$buy}"/>
						<do_if value="$buyoffer.available">
							<set_value name="$buycost" exact="$buyoffer.unitprice/100"/>
							<do_if value="($buycost == 0) or ($buyoffer.buyer.owner == this.assignedcontrolled.owner)">
								<set_value name="$buycost" exact="$buyoffer.unitprice/100"/>
							</do_if>
							<do_if value="$TaterDebugChance">
								<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'Scanning Buy Offer,Ware:,(%s),Buyer:,%s(%s)(%s),Price:,%s,RelativePrice:,%s,QuantityFactor:,%s,Gate Distance:,%s,Raw Distance:,%s'.[$buyoffer.ware,$buyoffer.buyer.knownname,$buyoffer.buyer.idcode,$buyoffer.buyer.trueowner,$buycost,$buyoffer.relativeprice,$buyoffer.quantityfactor,this.assignedcontrolled.gatedistance.{$buyoffer.buyer}.{$blacklistgroup}.{this.assignedcontrolled},this.assignedcontrolled.distanceto.{$buyoffer.buyer}]" output="false" append="true"/>
							</do_if>
							<do_all exact="$selloffers.count" counter="$sell">
								<set_value name="$selloffer" exact="$selloffers.{$sell}"/>
								<do_if value="$selloffer.available">
									<set_value name="$sellcost" exact="$selloffer.unitprice / 100"/>
									<set_value name="$Amount" exact="[this.assignedcontrolled.cargo.{$buyoffer.ware}.free,$buyoffer.amount,$selloffer.amount].min"/>
									<do_if value="$playerowned">
										<set_value name="$spendablemoney" exact="player.money / 100"/>
										<do_if value="$sellcost" min="1">
											<set_value name="$Amount" exact="[this.assignedcontrolled.cargo.{$buyoffer.ware}.free,$buyoffer.amount,$selloffer.amount,$spendablemoney / (2 * $sellcost)].min"/>
										</do_if>
									</do_if>
									<set_value name="$CheckGrofit" exact="false"/>
									<do_if value="(not $ignoretraderules) and (($selloffer.seller.trueowner == this.assignedcontrolled.trueowner) or ($buyoffer.buyer.trueowner == this.assignedcontrolled.trueowner)) and ($playerowned)">
										<!-- We're dealing with one of our owners stations, take special care here. -->
										<!-- Try to allow trade between owned stations regardless of restriction. -->
										<!-- if tradeoffer.restriction.inverted == 1, then the list returned by tradeoffer.restriction.factions is a blacklist. -->
										<!-- This corresponds to leaving "restrict all factions" blank in the trade rule UI -->
										<!-- if tradeoffer.restriction.inverted == 0, then the list returned by tradeoffer.restriction.factions is a whitelist. -->
										<!-- This corresponds to checking the box for "restrict all factions" in the trade rule UI -->
										<do_if value="($selloffer.restriction.factions.count != 0 and $selloffer.restriction.factions != null) or ($buyoffer.restriction.factions.count != 0 and $buyoffer.restriction.factions != null)">
											<do_if value="($selloffer.restriction.factions.count != 0 and $selloffer.restriction.factions != null)">
												<set_value name="$CheckGrofit" exact="true"/>
												<do_if value="$selloffer.restriction.inverted == 1">
													<do_if value="($selloffer.restriction.factions.indexof.{$buyoffer.buyer.owner} gt 0)">
														<set_value name="$CheckGrofit" exact="false"/>
													</do_if>
												</do_if>
												<do_elseif value="$selloffer.restriction.inverted == 0">
													<do_if value="($selloffer.restriction.factions.indexof.{$buyoffer.buyer.owner} lt 1)">
														<set_value name="$CheckGrofit" exact="false"/>
													</do_if>
												</do_elseif>
											</do_if>
											<do_if value="($buyoffer.restriction.factions.count != 0 and $buyoffer.restriction.factions != null)">
												<set_value name="$CheckGrofit" exact="true"/>
												<do_if value="$buyoffer.restriction.inverted == 1">
													<do_if value="($buyoffer.restriction.factions.indexof.{$selloffer.seller.owner} gt 0)">
														<set_value name="$CheckGrofit" exact="false"/>
													</do_if>
												</do_if>
												<do_elseif value="$buyoffer.restriction.inverted == 0">
													<do_if value="($buyoffer.restriction.factions.indexof.{$selloffer.seller.owner} lt 1)">
														<set_value name="$CheckGrofit" exact="false"/>
													</do_if>
												</do_elseif>
											</do_if>
										</do_if>
										<do_else>
											<set_value name="$CheckGrofit" exact="true"/>
										</do_else>
									</do_if>
									<do_else>
										<!-- We arnt trading with a station our owner owns, no restrictions go! (Or maybe they dont care and allowed free trading for this ship.) -->
										<set_value name="$CheckGrofit" exact="true"/>
									</do_else>
									<set_value name="$distancescale" exact="1"/>
									<set_value name="$distance" exact="0"/>
									<do_if value="$distancecheck">
										<do_if value="$playerowned">
											<!-- Distance to seller -->
											<set_value name="$DistancetoSeller" exact="this.assignedcontrolled.gatedistance.{$selloffer.seller}.{$blacklistgroup}.{this.assignedcontrolled}"/>
											<!-- Distance from seller to buyer -->
											<set_value name="$DistancetoBuyer" exact="$selloffer.seller.gatedistance.{$buyoffer.buyer}.{$blacklistgroup}.{this.assignedcontrolled}"/>
											<do_if value="($DistancetoSeller ge 0) and ($DistancetoBuyer ge 0)">
												<set_value name="$distance" exact="$DistancetoSeller + $DistancetoBuyer"/>
											</do_if>
											<do_else>
												<set_value name="$distance" exact="-1"/>
											</do_else>
										</do_if>
										<do_else>
											<!-- Distance to seller -->
											<set_value name="$DistancetoSeller" exact="this.assignedcontrolled.gatedistance.{$selloffer.seller}"/>
											<!-- Distance from seller to buyer -->
											<set_value name="$DistancetoBuyer" exact="$selloffer.seller.gatedistance.{$buyoffer.buyer}"/>
											<do_if value="($DistancetoSeller ge 0) and ($DistancetoBuyer ge 0)">
												<set_value name="$distance" exact="$DistancetoSeller + $DistancetoBuyer"/>
											</do_if>
											<do_else>
												<set_value name="$distance" exact="-1"/>
											</do_else>
										</do_else>
										<!-- Distance is -1 if there is no safe route -->
										<do_if value="$distance ge 0">
											<set_value name="$distancescale" exact="(1.0 - $distancecheckpercent / 100.0) ^ $distance"/>
										</do_if>
										<do_else>
											<set_value name="$distancescale" exact="0"/>
										</do_else>
									</do_if>
									<!-- DeadTater, no you're not allowed to buy and sell to the same station. -->
									<do_if value="$buyoffer.buyer == $selloffer.seller">
										<set_value name="$CheckGrofit" exact="false"/>
									</do_if>
									<do_if value="$CheckGrofit">
										<!-- Use a variable inplace of just copy pasting the section below. -->
										<do_if value="$Grofit lt ($Amount * (($buycost - $sellcost)f * $distancescale)ct)">
											<do_if value="$TaterDebugChance">
												<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'Scanning Sell Offer,Ware:,(%s),Seller:,%s(%s)(%s),Price:,%s,RelativePrice:,%s,QuantityFactor:,%s,Gate Distance:,%s,Raw Distance:,%s,Distance Scale:,%s'.[$buyoffer.ware,$selloffer.seller.knownname,$selloffer.seller.idcode,$selloffer.seller.trueowner,$sellcost,$selloffer.relativeprice,$selloffer.quantityfactor,$distance,this.assignedcontrolled.distanceto.{$selloffer.seller} + $selloffer.seller.distanceto.{$buyoffer.buyer},$distancescale]" output="false" append="true"/>
												<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'Sell Offer Calculations,Ware:,(%s),,,Grofit:,%s,Amount:,%s,BuyPrice:,%s,SellPrice:,%s,UnitProfit:,%s'.[$buyoffer.ware,$Amount*($buycost-$sellcost),$Amount,$buycost,$sellcost,($buycost-$sellcost)]" output="false" append="true"/>
											</do_if>
											<set_value name="$Grofit" exact="$Amount*($buycost-$sellcost)"/>
											<set_value name="$GrofferSell" exact="$selloffer"/>
											<set_value name="$GrofferBuy" exact="$buyoffer"/>
											<set_value name="$Gromount" exact="$Amount"/>
											<set_value name="$GrofitFound" exact="true"/>
											<set_value name="$itemcostsell" exact="$sellcost"/>
											<set_value name="$itemcostbuy" exact="$buycost"/>
										</do_if>
									</do_if>
								</do_if>
								<set_value name="$scantick" exact="1" operation="add"/>
								<do_if value="$scantick gt $scantickrate">
									<set_value name="$scantick" exact="0"/>
									<wait exact="1ms"/>
								</do_if>
							</do_all>
						</do_if>
					</do_all>
				</do_if>
			</do_all>
			<!-- 20231209 print out time taken to check Free Trade -->
			<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Time spent checking preferownfactionsell: %s -- Time spent in queue: %s'.[player.age,(player.age - $PreferOwnFactionSellStartTime - $TotalQueueTime),$TotalQueueTime]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
			<do_if value="@$GrofitFound">
				<resume label="setupdeals"/>
			</do_if>
			<!-- 20240317 End of preferownfactionsell -->
			<!-- 20240317 Start of preferownfactionbuy -->
			<!-- Prefer buying from own stations. Station SELL offers MUST be this.trueowner -->
			<label name="preferownbuy"/>
			<do_if value="@$preferownfactionbuy != true">
				<resume label="freetrade"/>
			</do_if>
			<set_value name="$PreferOwnFactionBuyStartTime" exact="player.age"/>
			<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Searching for preferownfactionbuy trade deals'.[player.age]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
			<set_value name="$Grofit" exact="0"/>
			<set_value name="$GrofitFound" exact="false"/>
			<wait exact="1ms"/>
			<do_if value="(not $usequeue?) or @$usequeue">
				<!-- 20240708 // TRADELOGIC QUEUE // preferownbuy -->
				<do_if value="global.$DATaterQueueTable.$TradeLogicQueue.{this.assignedcontrolled.trueowner}?">
					<append_to_list name="global.$DATaterQueueTable.$TradeLogicQueue.{this.assignedcontrolled.trueowner}" exact="this.assignedcontrolled" unique="true"/>
				</do_if>
				<do_else>
					<append_to_list name="global.$DATaterQueueTable.$TradeLogicQueue.{this.assignedcontrolled.trueowner}" exact="this.assignedcontrolled" unique="true" create="true"/>
				</do_else>
				<do_if value="not global.$DATaterQueueTable.$FactionTradeLogicQueue.indexof.{this.assignedcontrolled.trueowner}">
					<append_to_list name="global.$DATaterQueueTable.$FactionTradeLogicQueue" exact="this.assignedcontrolled.trueowner" unique="true"/>
				</do_if>
				<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Queued up for trade -- Spot in queue %s / %s'.[player.age,global.$DATaterQueueTable.$TradeLogicQueue.{this.assignedcontrolled.trueowner}.indexof.{this.assignedcontrolled},global.$DATaterQueueTable.$TradeLogicQueue.{this.assignedcontrolled.trueowner}.count]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
				<set_value name="$ExpectedDelay" exact="[(global.$DATaterQueueTable.$TradeLogicQueue.{this.assignedcontrolled.trueowner}.indexof.{this.assignedcontrolled} * 6)s,60s].max"/>
				<wait>
					<interrupt>
						<conditions>
							<event_object_signalled object="this.assignedcontrolled" param="'DeadTaterProceed'"/>
						</conditions>
						<actions>
							<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Received signal to proceed'.[player.age]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
						</actions>
					</interrupt>
					<interrupt_after_time time="$ExpectedDelay"/>
				</wait>
			</do_if>
			<set_value name="$TotalQueueTime" exact="player.age - $PreferOwnFactionBuyStartTime"/>
			<remove_value name="$ExpectedDelay"/>
			<!-- 20240421 // QUEUE END // preferownbuy -->
			<!-- 20240422 Shuffle Wares -->
			<shuffle_list list="$usedwarebasket"/>
			<do_all exact="$usedwarebasket.count" counter="$ware">
				<!-- First grab the offers for the ware from all the sectors in range.. -->
				<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Checking offers for ware: %s'.[player.age,$usedwarebasket.{$ware}]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
				<set_value name="$buyoffers" exact="[]"/>
				<do_all exact="$sellspaces.count" counter="$sector">
					<!-- sector is policed, ware is illegal to policefaction, my faction is not police faction, $illegalwares is false -->
					<do_if value="((not (($sellspaces.{$sector}.policefaction) and ($usedwarebasket.{$ware}.illegalto.{$sellspaces.{$sector}.policefaction}.{this.trueowner}) and ($sellspaces.{$sector}.policefaction != this.trueowner))) and (not $usedwarebasket.{$ware}.illegalto.{this.trueowner}.{null})) or $illegalwares">
						<do_if value="$minfill">
							<do_if value="$usedwarebasket.{$ware}.waretransport == waretransport.container">
								<set_value name="$currentminfill" exact="((this.assignedcontrolled.cargo.free.container + this.assignedcontrolled.cargo.free.universal) * ($minfillpercent / 100.0))i"/>
								<set_value name="$currentmaxfill" exact="this.assignedcontrolled.cargo.free.container + this.assignedcontrolled.cargo.free.universal"/>
							</do_if>
							<do_elseif value="$usedwarebasket.{$ware}.waretransport == waretransport.solid">
								<set_value name="$currentminfill" exact="((this.assignedcontrolled.cargo.free.solid + this.assignedcontrolled.cargo.free.universal) * ($minfillpercent / 100.0))i"/>
								<set_value name="$currentmaxfill" exact="this.assignedcontrolled.cargo.free.solid + this.assignedcontrolled.cargo.free.universal"/>
							</do_elseif>
							<do_elseif value="$usedwarebasket.{$ware}.waretransport == waretransport.liquid">
								<set_value name="$currentminfill" exact="((this.assignedcontrolled.cargo.free.liquid + this.assignedcontrolled.cargo.free.universal) * ($minfillpercent / 100.0))i"/>
								<set_value name="$currentmaxfill" exact="this.assignedcontrolled.cargo.free.liquid + this.assignedcontrolled.cargo.free.universal"/>
							</do_elseif>
							<do_else>
								<!-- Should never reach here -->
								<set_value name="$currentminfill" exact="1"/>
							</do_else>
							<find_buy_offer tradepartner="this.assignedcontrolled" space="$sellspaces.{$sector}" result="$buyers" multiple="true" wares="$usedwarebasket.{$ware}">
								<totalvolume min="$currentminfill"/>
								<mintotalvolume max="$currentmaxfill"/>
								<match_buyer>
									<match_content checkoperational="true">
										<match_dock size="this.assignedcontrolled.docksize" trading="true"/>
									</match_content>
									<match_relation_to object="this.assignedcontrolled" relation="dock" comparison="ge"/>
									<match tradesknownto="this.owner"/>
									<match_use_blacklist group="$blacklistgroup" type="blacklisttype.objectactivity" object="this.assignedcontrolled"/>
								</match_buyer>
							</find_buy_offer>
						</do_if>
						<do_else>
							<find_buy_offer tradepartner="this.assignedcontrolled" space="$sellspaces.{$sector}" result="$buyers" multiple="true" wares="$usedwarebasket.{$ware}">
								<match_buyer>
									<match_content checkoperational="true">
										<match_dock size="this.assignedcontrolled.docksize" trading="true"/>
									</match_content>
									<match_relation_to object="this.assignedcontrolled" relation="dock" comparison="ge"/>
									<match tradesknownto="this.owner"/>
									<match_use_blacklist group="$blacklistgroup" type="blacklisttype.objectactivity" object="this.assignedcontrolled"/>
								</match_buyer>
							</find_buy_offer>
						</do_else>
					</do_if>
					<set_value name="$scantick" exact="1" operation="add"/>
					<do_if value="$scantick gt $scantickrate">
						<set_value name="$scantick" exact="0"/>
						<wait exact="1ms"/>
					</do_if>
					<do_if value="@$buyers.count">
						<do_all exact="$buyers.count" counter="$buy">
							<!-- 20241002 Updating $ignoreshipbuyers code -->
							<do_if value="(not $ignoreshipbuyers) or ($ignoreshipbuyers and (not $buyers.{$buy}.buyer.isclass.ship))">
								<!-- 20241002 Implementing fix for stations with no storage -->
								<do_if value="$buyers.{$buy}.buyer.cargo.{$usedwarebasket.{$ware}}.free">
									<append_to_list name="$buyoffers" exact="$buyers.{$buy}"/>
								</do_if>
								<do_else>
									<debug_text text="'MOD: DeadTater -- %s(%s) -- Skipping offer from: %s(%s) in %s -- No cargo capacity for type: %s'.[this.assignedcontrolled.name,this.assignedcontrolled.idcode,$buyers.{$buy}.buyer.knownname,$buyers.{$buy}.buyer.idcode,$buyers.{$buy}.buyer.sector.knownname,$usedwarebasket.{$ware}.transporttag]" context="false" filter="scripts" chance="@$TaterDebugChance * 100"/>
								</do_else>
							</do_if>
						</do_all>
					</do_if>
					<remove_value name="$buyers"/>
				</do_all>
				<set_value name="$selloffers" exact="[]"/>
				<do_if value="$buyoffers.count">
					<do_all exact="$buyspaces.count" counter="$sector">
						<!-- sector is policed, ware is illegal to policefaction, my faction is not police faction, $illegalwares is false -->
						<do_if value="((not (($buyspaces.{$sector}.policefaction) and ($usedwarebasket.{$ware}.illegalto.{$buyspaces.{$sector}.policefaction}.{this.trueowner}) and ($buyspaces.{$sector}.policefaction != this.trueowner))) and (not $usedwarebasket.{$ware}.illegalto.{this.trueowner}.{null})) or $illegalwares">
							<do_if value="$minfill">
								<do_if value="$usedwarebasket.{$ware}.waretransport == waretransport.container">
									<set_value name="$currentminfill" exact="((this.assignedcontrolled.cargo.free.container + this.assignedcontrolled.cargo.free.universal) * ($minfillpercent / 100.0))i"/>
									<set_value name="$currentmaxfill" exact="this.assignedcontrolled.cargo.free.container + this.assignedcontrolled.cargo.free.universal"/>
								</do_if>
								<do_elseif value="$usedwarebasket.{$ware}.waretransport == waretransport.solid">
									<set_value name="$currentminfill" exact="((this.assignedcontrolled.cargo.free.solid + this.assignedcontrolled.cargo.free.universal) * ($minfillpercent / 100.0))i"/>
									<set_value name="$currentmaxfill" exact="this.assignedcontrolled.cargo.free.solid + this.assignedcontrolled.cargo.free.universal"/>
								</do_elseif>
								<do_elseif value="$usedwarebasket.{$ware}.waretransport == waretransport.liquid">
									<set_value name="$currentminfill" exact="((this.assignedcontrolled.cargo.free.liquid + this.assignedcontrolled.cargo.free.universal) * ($minfillpercent / 100.0))i"/>
									<set_value name="$currentmaxfill" exact="this.assignedcontrolled.cargo.free.liquid + this.assignedcontrolled.cargo.free.universal"/>
								</do_elseif>
								<do_else>
									<!-- Should never reach here -->
									<set_value name="$currentminfill" exact="1"/>
								</do_else>
								<find_sell_offer tradepartner="this.assignedcontrolled" space="$buyspaces.{$sector}" result="$sellers" multiple="true" wares="$usedwarebasket.{$ware}">
									<!-- <offervolume min="$currentminfill" tradepartner="this.assignedcontrolled"/> -->
									<totalvolume min="$currentminfill"/>
									<mintotalvolume max="$currentmaxfill"/>
									<match_seller owner="this.trueowner">
										<match_content checkoperational="true">
											<match_dock size="this.assignedcontrolled.docksize" trading="true"/>
										</match_content>
										<match_relation_to object="this.assignedcontrolled" relation="dock" comparison="ge"/>
										<match tradesknownto="this.owner"/>
										<match_use_blacklist group="$blacklistgroup" type="blacklisttype.objectactivity" object="this.assignedcontrolled"/>
									</match_seller>
								</find_sell_offer>
							</do_if>
							<do_else>
								<find_sell_offer tradepartner="this.assignedcontrolled" space="$buyspaces.{$sector}" result="$sellers" multiple="true" wares="$usedwarebasket.{$ware}">
									<match_seller owner="this.trueowner">
										<match_content checkoperational="true">
											<match_dock size="this.assignedcontrolled.docksize" trading="true"/>
										</match_content>
										<match_relation_to object="this.assignedcontrolled" relation="dock" comparison="ge"/>
										<match tradesknownto="this.owner"/>
										<match_use_blacklist group="$blacklistgroup" type="blacklisttype.objectactivity" object="this.assignedcontrolled"/>
									</match_seller>
								</find_sell_offer>
							</do_else>
						</do_if>
						<set_value name="$scantick" exact="1" operation="add"/>
						<do_if value="$scantick gt $scantickrate">
							<set_value name="$scantick" exact="0"/>
							<wait exact="1ms"/>
						</do_if>
						<do_if value="@$sellers.count">
							<do_all exact="$sellers.count" counter="$sell">
								<!-- 20240317 At the moment, ships cannot sell goods but this should future proof it. -->
								<!-- 20241002 Updating $ignoreshipbuyers code -->
								<do_if value="(not $ignoreshipbuyers) or ($ignoreshipbuyers and (not $sellers.{$sell}.seller.isclass.ship))">
									<append_to_list name="$selloffers" exact="$sellers.{$sell}"/>
								</do_if>
							</do_all>
						</do_if>
						<remove_value name="$sellers"/>
					</do_all>
				</do_if>
				<!-- Are there any possible deals withen our search area? -->
				<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- I found these offers nearby, Buy: %s Sell: %s'.[player.age,$buyoffers.count,$selloffers.count]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
				<do_if value="$buyoffers.count and $selloffers.count">
					<!-- Now we compare the offers and try to get a decent deal -->
					<!-- 20240422 Shuffle Wares -->
					<shuffle_list list="$buyoffers"/>
					<sort_list list="$buyoffers" sortbyvalue="loop.element.relativeprice" sortdescending="true" comment="highest relative price to lowest"/>
					<do_if value="$buyoffers.count gt 5">
						<resize_list list="$buyoffers" count="5"/>
					</do_if>
					<!-- 20240422 Shuffle Wares -->
					<shuffle_list list="$selloffers"/>
					<sort_list list="$selloffers" sortbyvalue="loop.element.relativeprice" sortdescending="false" comment="lowest relative price to highest"/>
					<do_if value="$selloffers.count gt 5">
						<resize_list list="$selloffers" count="5"/>
					</do_if>
					<do_all exact="$buyoffers.count" counter="$buy">
						<set_value name="$buyoffer" exact="$buyoffers.{$buy}"/>
						<do_if value="$buyoffer.available">
							<set_value name="$buycost" exact="$buyoffer.unitprice/100"/>
							<do_if value="($buycost == 0) or ($buyoffer.buyer.owner == this.assignedcontrolled.owner)">
								<set_value name="$buycost" exact="$buyoffer.unitprice/100"/>
							</do_if>
							<do_if value="$TaterDebugChance">
								<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'Scanning Buy Offer,Ware:,(%s),Buyer:,%s(%s)(%s),Price:,%s,RelativePrice:,%s,QuantityFactor:,%s,Gate Distance:,%s,Raw Distance:,%s'.[$buyoffer.ware,$buyoffer.buyer.knownname,$buyoffer.buyer.idcode,$buyoffer.buyer.trueowner,$buycost,$buyoffer.relativeprice,$buyoffer.quantityfactor,this.assignedcontrolled.gatedistance.{$buyoffer.buyer}.{$blacklistgroup}.{this.assignedcontrolled},this.assignedcontrolled.distanceto.{$buyoffer.buyer}]" output="false" append="true"/>
							</do_if>
							<do_all exact="$selloffers.count" counter="$sell">
								<set_value name="$selloffer" exact="$selloffers.{$sell}"/>
								<do_if value="$selloffer.available">
									<set_value name="$sellcost" exact="$selloffer.unitprice / 100"/>
									<set_value name="$Amount" exact="[this.assignedcontrolled.cargo.{$buyoffer.ware}.free,$buyoffer.amount,$selloffer.amount].min"/>
									<!-- 20240422 Buying from our own station means we can ignore the 50% spending limit -->
									<!-- 20240422 Removing old $spendablemoney since the value is unnecessary -->
									<remove_value name="$spendablemoney"/>
									<set_value name="$CheckGrofit" exact="false"/>
									<do_if value="(not $ignoretraderules) and (($selloffer.seller.trueowner == this.assignedcontrolled.trueowner) or ($buyoffer.buyer.trueowner == this.assignedcontrolled.trueowner)) and ($playerowned)">
										<!-- We're dealing with one of our owners stations, take special care here. -->
										<!-- Try to allow trade between owned stations regardless of restriction. -->
										<!-- if tradeoffer.restriction.inverted == 1, then the list returned by tradeoffer.restriction.factions is a blacklist. -->
										<!-- This corresponds to leaving "restrict all factions" blank in the trade rule UI -->
										<!-- if tradeoffer.restriction.inverted == 0, then the list returned by tradeoffer.restriction.factions is a whitelist. -->
										<!-- This corresponds to checking the box for "restrict all factions" in the trade rule UI -->
										<do_if value="($selloffer.restriction.factions.count != 0 and $selloffer.restriction.factions != null) or ($buyoffer.restriction.factions.count != 0 and $buyoffer.restriction.factions != null)">
											<do_if value="($selloffer.restriction.factions.count != 0 and $selloffer.restriction.factions != null)">
												<set_value name="$CheckGrofit" exact="true"/>
												<do_if value="$selloffer.restriction.inverted == 1">
													<do_if value="($selloffer.restriction.factions.indexof.{$buyoffer.buyer.owner} gt 0)">
														<set_value name="$CheckGrofit" exact="false"/>
													</do_if>
												</do_if>
												<do_elseif value="$selloffer.restriction.inverted == 0">
													<do_if value="($selloffer.restriction.factions.indexof.{$buyoffer.buyer.owner} lt 1)">
														<set_value name="$CheckGrofit" exact="false"/>
													</do_if>
												</do_elseif>
											</do_if>
											<do_if value="($buyoffer.restriction.factions.count != 0 and $buyoffer.restriction.factions != null)">
												<set_value name="$CheckGrofit" exact="true"/>
												<do_if value="$buyoffer.restriction.inverted == 1">
													<do_if value="($buyoffer.restriction.factions.indexof.{$selloffer.seller.owner} gt 0)">
														<set_value name="$CheckGrofit" exact="false"/>
													</do_if>
												</do_if>
												<do_elseif value="$buyoffer.restriction.inverted == 0">
													<do_if value="($buyoffer.restriction.factions.indexof.{$selloffer.seller.owner} lt 1)">
														<set_value name="$CheckGrofit" exact="false"/>
													</do_if>
												</do_elseif>
											</do_if>
										</do_if>
										<do_else>
											<set_value name="$CheckGrofit" exact="true"/>
										</do_else>
									</do_if>
									<do_else>
										<!-- We arnt trading with a station our owner owns, no restrictions go! (Or maybe they dont care and allowed free trading for this ship.) -->
										<set_value name="$CheckGrofit" exact="true"/>
									</do_else>
									<set_value name="$distancescale" exact="1"/>
									<set_value name="$distance" exact="0"/>
									<do_if value="$distancecheck">
										<do_if value="$playerowned">
											<!-- Distance to seller -->
											<set_value name="$DistancetoSeller" exact="this.assignedcontrolled.gatedistance.{$selloffer.seller}.{$blacklistgroup}.{this.assignedcontrolled}"/>
											<!-- Distance from seller to buyer -->
											<set_value name="$DistancetoBuyer" exact="$selloffer.seller.gatedistance.{$buyoffer.buyer}.{$blacklistgroup}.{this.assignedcontrolled}"/>
											<do_if value="($DistancetoSeller ge 0) and ($DistancetoBuyer ge 0)">
												<set_value name="$distance" exact="$DistancetoSeller + $DistancetoBuyer"/>
											</do_if>
											<do_else>
												<set_value name="$distance" exact="-1"/>
											</do_else>
										</do_if>
										<do_else>
											<!-- Distance to seller -->
											<set_value name="$DistancetoSeller" exact="this.assignedcontrolled.gatedistance.{$selloffer.seller}"/>
											<!-- Distance from seller to buyer -->
											<set_value name="$DistancetoBuyer" exact="$selloffer.seller.gatedistance.{$buyoffer.buyer}"/>
											<do_if value="($DistancetoSeller ge 0) and ($DistancetoBuyer ge 0)">
												<set_value name="$distance" exact="$DistancetoSeller + $DistancetoBuyer"/>
											</do_if>
											<do_else>
												<set_value name="$distance" exact="-1"/>
											</do_else>
										</do_else>
										<!-- Distance is -1 if there is no safe route -->
										<do_if value="$distance ge 0">
											<set_value name="$distancescale" exact="(1.0 - $distancecheckpercent / 100.0) ^ $distance"/>
										</do_if>
										<do_else>
											<set_value name="$distancescale" exact="0"/>
										</do_else>
									</do_if>
									<!-- DeadTater, no you're not allowed to buy and sell to the same station. -->
									<do_if value="$buyoffer.buyer == $selloffer.seller">
										<set_value name="$CheckGrofit" exact="false"/>
									</do_if>
									<do_if value="$CheckGrofit">
										<!-- Use a variable inplace of just copy pasting the section below. -->
										<do_if value="$Grofit lt ($Amount * (($buycost - $sellcost)f * $distancescale)ct)">
											<do_if value="$TaterDebugChance">
												<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'Scanning Sell Offer,Ware:,(%s),Seller:,%s(%s)(%s),Price:,%s,RelativePrice:,%s,QuantityFactor:,%s,Gate Distance:,%s,Raw Distance:,%s,Distance Scale:,%s'.[$buyoffer.ware,$selloffer.seller.knownname,$selloffer.seller.idcode,$selloffer.seller.trueowner,$sellcost,$selloffer.relativeprice,$selloffer.quantityfactor,$distance,this.assignedcontrolled.distanceto.{$selloffer.seller} + $selloffer.seller.distanceto.{$buyoffer.buyer},$distancescale]" output="false" append="true"/>
												<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'Sell Offer Calculations,Ware:,(%s),,,Grofit:,%s,Amount:,%s,BuyPrice:,%s,SellPrice:,%s,UnitProfit:,%s'.[$buyoffer.ware,$Amount*($buycost-$sellcost),$Amount,$buycost,$sellcost,($buycost-$sellcost)]" output="false" append="true"/>
											</do_if>
											<set_value name="$Grofit" exact="$Amount*($buycost-$sellcost)"/>
											<set_value name="$GrofferSell" exact="$selloffer"/>
											<set_value name="$GrofferBuy" exact="$buyoffer"/>
											<set_value name="$Gromount" exact="$Amount"/>
											<set_value name="$GrofitFound" exact="true"/>
											<set_value name="$itemcostsell" exact="$sellcost"/>
											<set_value name="$itemcostbuy" exact="$buycost"/>
										</do_if>
									</do_if>
								</do_if>
								<set_value name="$scantick" exact="1" operation="add"/>
								<do_if value="$scantick gt $scantickrate">
									<set_value name="$scantick" exact="0"/>
									<wait exact="1ms"/>
								</do_if>
							</do_all>
						</do_if>
					</do_all>
				</do_if>
			</do_all>
			<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Time spent checking preferownfactionbuy: %s -- Time spent in queue: %s'.[player.age,(player.age - $PreferOwnFactionBuyStartTime - $TotalQueueTime),$TotalQueueTime]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
			<do_if value="@$GrofitFound">
				<resume label="setupdeals"/>
			</do_if>
			<!-- 20240317 End of preferownfactionbuy -->
			<!-- No Preference on trade partners -->
			<label name="freetrade"/>
			<!-- Free Trader mode -->
			<!-- Find trade deals we can run. -->
			<!-- 20231209 track time to free trade -->
			<set_value name="$FreeTradeStartTime" exact="player.age"/>
			<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Searching for trade deals'.[player.age]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
			<set_value name="$Grofit" exact="1"/>
			<set_value name="$GrofitFound" exact="false"/>
			<wait exact="1ms"/>
			<do_if value="(not $usequeue?) or @$usequeue">
				<!-- 20240708 // TRADELOGIC QUEUE // freetrade -->
				<do_if value="global.$DATaterQueueTable.$TradeLogicQueue.{this.assignedcontrolled.trueowner}?">
					<append_to_list name="global.$DATaterQueueTable.$TradeLogicQueue.{this.assignedcontrolled.trueowner}" exact="this.assignedcontrolled" unique="true"/>
				</do_if>
				<do_else>
					<append_to_list name="global.$DATaterQueueTable.$TradeLogicQueue.{this.assignedcontrolled.trueowner}" exact="this.assignedcontrolled" unique="true" create="true"/>
				</do_else>
				<do_if value="not global.$DATaterQueueTable.$FactionTradeLogicQueue.indexof.{this.assignedcontrolled.trueowner}">
					<append_to_list name="global.$DATaterQueueTable.$FactionTradeLogicQueue" exact="this.assignedcontrolled.trueowner" unique="true"/>
				</do_if>
				<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Queued up for trade -- Spot in queue %s / %s'.[player.age,global.$DATaterQueueTable.$TradeLogicQueue.{this.assignedcontrolled.trueowner}.indexof.{this.assignedcontrolled},global.$DATaterQueueTable.$TradeLogicQueue.{this.assignedcontrolled.trueowner}.count]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
				<set_value name="$ExpectedDelay" exact="[(global.$DATaterQueueTable.$TradeLogicQueue.{this.assignedcontrolled.trueowner}.indexof.{this.assignedcontrolled} * 6)s,60s].max"/>
				<wait>
					<interrupt>
						<conditions>
							<event_object_signalled object="this.assignedcontrolled" param="'DeadTaterProceed'"/>
						</conditions>
						<actions>
							<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Received signal to proceed'.[player.age]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
						</actions>
					</interrupt>
					<interrupt_after_time time="$ExpectedDelay"/>
				</wait>
			</do_if>
			<set_value name="$TotalQueueTime" exact="player.age - $FreeTradeStartTime"/>
			<remove_value name="$ExpectedDelay"/>
			<!-- 20240421 // QUEUE END // freetrade -->
			<!-- 20240422 Shuffle Wares -->
			<shuffle_list list="$usedwarebasket"/>
			<do_all exact="$usedwarebasket.count" counter="$ware">
				<!-- First grab the offers for the ware from all the sectors in range.. -->
				<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Checking offers for ware: %s'.[player.age,$usedwarebasket.{$ware}]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
				<set_value name="$buyoffers" exact="[]"/>
				<do_all exact="$sellspaces.count" counter="$sector">
					<!-- sector is policed, ware is illegal to policefaction, my faction is not police faction, $illegalwares is false -->
					<do_if value="((not (($sellspaces.{$sector}.policefaction) and ($usedwarebasket.{$ware}.illegalto.{$sellspaces.{$sector}.policefaction}.{this.trueowner}) and ($sellspaces.{$sector}.policefaction != this.trueowner))) and (not $usedwarebasket.{$ware}.illegalto.{this.trueowner}.{null})) or $illegalwares">
						<do_if value="$minfill">
							<do_if value="$usedwarebasket.{$ware}.waretransport == waretransport.container">
								<set_value name="$currentminfill" exact="((this.assignedcontrolled.cargo.free.container + this.assignedcontrolled.cargo.free.universal) * ($minfillpercent / 100.0))i"/>
								<set_value name="$currentmaxfill" exact="this.assignedcontrolled.cargo.free.container + this.assignedcontrolled.cargo.free.universal"/>
							</do_if>
							<do_elseif value="$usedwarebasket.{$ware}.waretransport == waretransport.solid">
								<set_value name="$currentminfill" exact="((this.assignedcontrolled.cargo.free.solid + this.assignedcontrolled.cargo.free.universal) * ($minfillpercent / 100.0))i"/>
								<set_value name="$currentmaxfill" exact="this.assignedcontrolled.cargo.free.solid + this.assignedcontrolled.cargo.free.universal"/>
							</do_elseif>
							<do_elseif value="$usedwarebasket.{$ware}.waretransport == waretransport.liquid">
								<set_value name="$currentminfill" exact="((this.assignedcontrolled.cargo.free.liquid + this.assignedcontrolled.cargo.free.universal) * ($minfillpercent / 100.0))i"/>
								<set_value name="$currentmaxfill" exact="this.assignedcontrolled.cargo.free.liquid + this.assignedcontrolled.cargo.free.universal"/>
							</do_elseif>
							<do_else>
								<!-- Should never reach here -->
								<set_value name="$currentminfill" exact="1"/>
							</do_else>
							<find_buy_offer tradepartner="this.assignedcontrolled" space="$sellspaces.{$sector}" result="$buyers" multiple="true" wares="$usedwarebasket.{$ware}">
								<!-- <offervolume min="$currentminfill" tradepartner="this.assignedcontrolled"/> wasn't blocking trades below required amount correctly-->
								<totalvolume min="$currentminfill"/>
								<mintotalvolume max="$currentmaxfill"/>
								<match_buyer>
									<match_content checkoperational="true">
										<match_dock size="this.assignedcontrolled.docksize" trading="true"/>
									</match_content>
									<match_relation_to object="this.assignedcontrolled" relation="dock" comparison="ge"/>
									<match tradesknownto="this.owner"/>
									<match_use_blacklist group="$blacklistgroup" type="blacklisttype.objectactivity" object="this.assignedcontrolled"/>
								</match_buyer>
							</find_buy_offer>
						</do_if>
						<do_else>
							<find_buy_offer tradepartner="this.assignedcontrolled" space="$sellspaces.{$sector}" result="$buyers" multiple="true" wares="$usedwarebasket.{$ware}">
								<match_buyer>
									<match_content checkoperational="true">
										<match_dock size="this.assignedcontrolled.docksize" trading="true"/>
									</match_content>
									<match_relation_to object="this.assignedcontrolled" relation="dock" comparison="ge"/>
									<match tradesknownto="this.owner"/>
									<match_use_blacklist group="$blacklistgroup" type="blacklisttype.objectactivity" object="this.assignedcontrolled"/>
								</match_buyer>
							</find_buy_offer>
						</do_else>
					</do_if>
					<set_value name="$scantick" exact="1" operation="add"/>
					<do_if value="$scantick gt $scantickrate">
						<set_value name="$scantick" exact="0"/>
						<wait exact="1ms"/>
					</do_if>
					<do_if value="@$buyers.count">
						<do_all exact="$buyers.count" counter="$buy">
							<!-- 20240317 ignoreshipbuyers filtering was missing from freetrade section. FIXED -->
							<!-- 20241002 Updating $ignoreshipbuyers code -->
							<do_if value="(not $ignoreshipbuyers) or ($ignoreshipbuyers and (not $buyers.{$buy}.buyer.isclass.ship))">
								<!-- 20241002 Implementing fix for stations with no storage -->
								<do_if value="$buyers.{$buy}.buyer.cargo.{$usedwarebasket.{$ware}}.free">
									<append_to_list name="$buyoffers" exact="$buyers.{$buy}"/>
								</do_if>
								<do_else>
									<debug_text text="'MOD: DeadTater -- %s(%s) -- Skipping offer from: %s(%s) in %s -- No cargo capacity for type: %s'.[this.assignedcontrolled.name,this.assignedcontrolled.idcode,$buyers.{$buy}.buyer.knownname,$buyers.{$buy}.buyer.idcode,$buyers.{$buy}.buyer.sector.knownname,$usedwarebasket.{$ware}.transporttag]" context="false" filter="scripts" chance="@$TaterDebugChance * 100"/>
								</do_else>
							</do_if>
						</do_all>
					</do_if>
					<remove_value name="$buyers"/>
				</do_all>
				<set_value name="$selloffers" exact="[]"/>
				<do_if value="$buyoffers.count">
					<do_all exact="$buyspaces.count" counter="$sector">
						<!-- sector is policed, ware is illegal to policefaction, my faction is not police faction, $illegalwares is false -->
						<do_if value="((not (($buyspaces.{$sector}.policefaction) and ($usedwarebasket.{$ware}.illegalto.{$buyspaces.{$sector}.policefaction}.{this.trueowner}) and ($buyspaces.{$sector}.policefaction != this.trueowner))) and (not $usedwarebasket.{$ware}.illegalto.{this.trueowner}.{null})) or $illegalwares">
							<do_if value="$minfill">
								<do_if value="$usedwarebasket.{$ware}.waretransport == waretransport.container">
									<set_value name="$currentminfill" exact="((this.assignedcontrolled.cargo.free.container + this.assignedcontrolled.cargo.free.universal) * ($minfillpercent / 100.0))i"/>
									<set_value name="$currentmaxfill" exact="this.assignedcontrolled.cargo.free.container + this.assignedcontrolled.cargo.free.universal"/>
								</do_if>
								<do_elseif value="$usedwarebasket.{$ware}.waretransport == waretransport.solid">
									<set_value name="$currentminfill" exact="((this.assignedcontrolled.cargo.free.solid + this.assignedcontrolled.cargo.free.universal) * ($minfillpercent / 100.0))i"/>
									<set_value name="$currentmaxfill" exact="this.assignedcontrolled.cargo.free.solid + this.assignedcontrolled.cargo.free.universal"/>
								</do_elseif>
								<do_elseif value="$usedwarebasket.{$ware}.waretransport == waretransport.liquid">
									<set_value name="$currentminfill" exact="((this.assignedcontrolled.cargo.free.liquid + this.assignedcontrolled.cargo.free.universal) * ($minfillpercent / 100.0))i"/>
									<set_value name="$currentmaxfill" exact="this.assignedcontrolled.cargo.free.liquid + this.assignedcontrolled.cargo.free.universal"/>
								</do_elseif>
								<do_else>
									<!-- Should never reach here -->
									<set_value name="$currentminfill" exact="1"/>
								</do_else>
								<find_sell_offer tradepartner="this.assignedcontrolled" space="$buyspaces.{$sector}" result="$sellers" multiple="true" wares="$usedwarebasket.{$ware}">
									<!-- <offervolume min="$currentminfill" tradepartner="this.assignedcontrolled"/> -->
									<totalvolume min="$currentminfill"/>
									<mintotalvolume max="$currentmaxfill"/>
									<match_seller>
										<match_content checkoperational="true">
											<match_dock size="this.assignedcontrolled.docksize" trading="true"/>
										</match_content>
										<match_relation_to object="this.assignedcontrolled" relation="dock" comparison="ge"/>
										<match tradesknownto="this.owner"/>
										<match_use_blacklist group="$blacklistgroup" type="blacklisttype.objectactivity" object="this.assignedcontrolled"/>
									</match_seller>
								</find_sell_offer>
							</do_if>
							<do_else>
								<find_sell_offer tradepartner="this.assignedcontrolled" space="$buyspaces.{$sector}" result="$sellers" multiple="true" wares="$usedwarebasket.{$ware}">
									<match_seller>
										<match_content checkoperational="true">
											<match_dock size="this.assignedcontrolled.docksize" trading="true"/>
										</match_content>
										<match_relation_to object="this.assignedcontrolled" relation="dock" comparison="ge"/>
										<match tradesknownto="this.owner"/>
										<match_use_blacklist group="$blacklistgroup" type="blacklisttype.objectactivity" object="this.assignedcontrolled"/>
									</match_seller>
								</find_sell_offer>
							</do_else>
						</do_if>
						<set_value name="$scantick" exact="1" operation="add"/>
						<do_if value="$scantick gt $scantickrate">
							<set_value name="$scantick" exact="0"/>
							<wait exact="1ms"/>
						</do_if>
						<do_if value="@$sellers.count">
							<do_all exact="$sellers.count" counter="$sell">
								<!-- 20240317 At the moment, ships cannot sell goods but this should future proof it. -->
								<!-- 20241002 Updating $ignoreshipbuyers code -->
								<do_if value="(not $ignoreshipbuyers) or ($ignoreshipbuyers and (not $sellers.{$sell}.seller.isclass.ship))">
									<append_to_list name="$selloffers" exact="$sellers.{$sell}"/>
								</do_if>
							</do_all>
						</do_if>
						<remove_value name="$sellers"/>
					</do_all>
				</do_if>
				<!-- Are there any possible deals withen our search area? -->
				<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- I found these offers nearby, Buy: %s Sell: %s'.[player.age,$buyoffers.count,$selloffers.count]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
				<do_if value="$buyoffers.count and $selloffers.count">
					<!-- Now we compare the offers and try to get a decent deal -->
					<!-- 20240422 Shuffle Wares -->
					<shuffle_list list="$buyoffers"/>
					<sort_list list="$buyoffers" sortbyvalue="loop.element.relativeprice" sortdescending="true" comment="highest relative price to lowest"/>
					<do_if value="$buyoffers.count gt 5">
						<resize_list list="$buyoffers" count="5"/>
					</do_if>
					<!-- 20240422 Shuffle Wares -->
					<shuffle_list list="$selloffers"/>
					<sort_list list="$selloffers" sortbyvalue="loop.element.relativeprice" sortdescending="false" comment="lowest relative price to highest"/>
					<do_if value="$selloffers.count gt 5">
						<resize_list list="$selloffers" count="5"/>
					</do_if>
					<do_all exact="$buyoffers.count" counter="$buy">
						<set_value name="$buyoffer" exact="$buyoffers.{$buy}"/>
						<do_if value="$buyoffer.available">
							<set_value name="$buycost" exact="$buyoffer.unitprice/100"/>
							<do_if value="($buycost == 0) or ($buyoffer.buyer.owner == this.assignedcontrolled.owner)">
								<set_value name="$buycost" exact="$buyoffer.unitprice/100"/>
							</do_if>
							<do_if value="$TaterDebugChance">
								<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'Scanning Buy Offer,Ware:,(%s),Buyer:,%s(%s)(%s),Price:,%s,RelativePrice:,%s,QuantityFactor:,%s,Gate Distance:,%s,Raw Distance:,%s'.[$buyoffer.ware,$buyoffer.buyer.knownname,$buyoffer.buyer.idcode,$buyoffer.buyer.trueowner,$buycost,$buyoffer.relativeprice,$buyoffer.quantityfactor,this.assignedcontrolled.gatedistance.{$buyoffer.buyer}.{$blacklistgroup}.{this.assignedcontrolled},this.assignedcontrolled.distanceto.{$buyoffer.buyer}]" output="false" append="true"/>
							</do_if>
							<do_all exact="$selloffers.count" counter="$sell">
								<set_value name="$selloffer" exact="$selloffers.{$sell}"/>
								<do_if value="$selloffer.available">
									<set_value name="$sellcost" exact="$selloffer.unitprice / 100"/>
									<set_value name="$Amount" exact="[this.assignedcontrolled.cargo.{$buyoffer.ware}.free,$buyoffer.amount,$selloffer.amount].min"/>
									<do_if value="$playerowned">
										<set_value name="$spendablemoney" exact="player.money / 100"/>
										<do_if value="$sellcost" min="1">
											<set_value name="$Amount" exact="[this.assignedcontrolled.cargo.{$buyoffer.ware}.free,$buyoffer.amount,$selloffer.amount,$spendablemoney / (2 * $sellcost)].min"/>
										</do_if>
									</do_if>
									<set_value name="$CheckGrofit" exact="false"/>
									<do_if value="(not $ignoretraderules) and (($selloffer.seller.trueowner == this.assignedcontrolled.trueowner) or ($buyoffer.buyer.trueowner == this.assignedcontrolled.trueowner)) and ($playerowned)">
										<!-- We're dealing with one of our owners stations, take special care here. -->
										<!-- Try to allow trade between owned stations regardless of restriction. -->
										<!-- if tradeoffer.restriction.inverted == 1, then the list returned by tradeoffer.restriction.factions is a blacklist. -->
										<!-- This corresponds to leaving "restrict all factions" blank in the trade rule UI -->
										<!-- if tradeoffer.restriction.inverted == 0, then the list returned by tradeoffer.restriction.factions is a whitelist. -->
										<!-- This corresponds to checking the box for "restrict all factions" in the trade rule UI -->
										<do_if value="($selloffer.restriction.factions.count != 0 and $selloffer.restriction.factions != null) or ($buyoffer.restriction.factions.count != 0 and $buyoffer.restriction.factions != null)">
											<do_if value="($selloffer.restriction.factions.count != 0 and $selloffer.restriction.factions != null)">
												<set_value name="$CheckGrofit" exact="true"/>
												<do_if value="$selloffer.restriction.inverted == 1">
													<do_if value="($selloffer.restriction.factions.indexof.{$buyoffer.buyer.owner} gt 0)">
														<set_value name="$CheckGrofit" exact="false"/>
													</do_if>
												</do_if>
												<do_elseif value="$selloffer.restriction.inverted == 0">
													<do_if value="($selloffer.restriction.factions.indexof.{$buyoffer.buyer.owner} lt 1)">
														<set_value name="$CheckGrofit" exact="false"/>
													</do_if>
												</do_elseif>
											</do_if>
											<do_if value="($buyoffer.restriction.factions.count != 0 and $buyoffer.restriction.factions != null)">
												<set_value name="$CheckGrofit" exact="true"/>
												<do_if value="$buyoffer.restriction.inverted == 1">
													<do_if value="($buyoffer.restriction.factions.indexof.{$selloffer.seller.owner} gt 0)">
														<set_value name="$CheckGrofit" exact="false"/>
													</do_if>
												</do_if>
												<do_elseif value="$buyoffer.restriction.inverted == 0">
													<do_if value="($buyoffer.restriction.factions.indexof.{$selloffer.seller.owner} lt 1)">
														<set_value name="$CheckGrofit" exact="false"/>
													</do_if>
												</do_elseif>
											</do_if>
										</do_if>
										<do_else>
											<set_value name="$CheckGrofit" exact="true"/>
										</do_else>
									</do_if>
									<do_else>
										<!-- We arnt trading with a station our owner owns, no restrictions go! (Or maybe they dont care and allowed free trading for this ship.) -->
										<set_value name="$CheckGrofit" exact="true"/>
									</do_else>
									<set_value name="$distancescale" exact="1"/>
									<set_value name="$distance" exact="0"/>
									<do_if value="$distancecheck">
										<do_if value="$playerowned">
											<!-- Distance to seller -->
											<set_value name="$DistancetoSeller" exact="this.assignedcontrolled.gatedistance.{$selloffer.seller}.{$blacklistgroup}.{this.assignedcontrolled}"/>
											<!-- Distance from seller to buyer -->
											<set_value name="$DistancetoBuyer" exact="$selloffer.seller.gatedistance.{$buyoffer.buyer}.{$blacklistgroup}.{this.assignedcontrolled}"/>
											<do_if value="($DistancetoSeller ge 0) and ($DistancetoBuyer ge 0)">
												<set_value name="$distance" exact="$DistancetoSeller + $DistancetoBuyer"/>
											</do_if>
											<do_else>
												<set_value name="$distance" exact="-1"/>
											</do_else>
										</do_if>
										<do_else>
											<!-- Distance to seller -->
											<set_value name="$DistancetoSeller" exact="this.assignedcontrolled.gatedistance.{$selloffer.seller}"/>
											<!-- Distance from seller to buyer -->
											<set_value name="$DistancetoBuyer" exact="$selloffer.seller.gatedistance.{$buyoffer.buyer}"/>
											<do_if value="($DistancetoSeller ge 0) and ($DistancetoBuyer ge 0)">
												<set_value name="$distance" exact="$DistancetoSeller + $DistancetoBuyer"/>
											</do_if>
											<do_else>
												<set_value name="$distance" exact="-1"/>
											</do_else>
										</do_else>
										<!-- Distance is -1 if there is no safe route -->
										<do_if value="$distance ge 0">
											<set_value name="$distancescale" exact="(1.0 - $distancecheckpercent / 100.0) ^ $distance"/>
										</do_if>
										<do_else>
											<set_value name="$distancescale" exact="0"/>
										</do_else>
									</do_if>
									<!-- DeadTater, no you're not allowed to buy and sell to the same station. -->
									<do_if value="$buyoffer.buyer == $selloffer.seller">
										<set_value name="$CheckGrofit" exact="false"/>
									</do_if>
									<do_if value="$CheckGrofit">
										<!-- Use a variable inplace of just copy pasting the section below. -->
										<do_if value="$Grofit lt ($Amount * (($buycost - $sellcost)f * $distancescale)ct)">
											<do_if value="$TaterDebugChance">
												<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'Scanning Sell Offer,Ware:,(%s),Seller:,%s(%s)(%s),Price:,%s,RelativePrice:,%s,QuantityFactor:,%s,Gate Distance:,%s,Raw Distance:,%s,Distance Scale:,%s'.[$buyoffer.ware,$selloffer.seller.knownname,$selloffer.seller.idcode,$selloffer.seller.trueowner,$sellcost,$selloffer.relativeprice,$selloffer.quantityfactor,$distance,this.assignedcontrolled.distanceto.{$selloffer.seller} + $selloffer.seller.distanceto.{$buyoffer.buyer},$distancescale]" output="false" append="true"/>
												<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'Sell Offer Calculations,Ware:,(%s),,,Grofit:,%s,Amount:,%s,BuyPrice:,%s,SellPrice:,%s,UnitProfit:,%s'.[$buyoffer.ware,$Amount*($buycost-$sellcost),$Amount,$buycost,$sellcost,($buycost-$sellcost)]" output="false" append="true"/>
											</do_if>
											<set_value name="$Grofit" exact="$Amount*($buycost-$sellcost)"/>
											<set_value name="$GrofferSell" exact="$selloffer"/>
											<set_value name="$GrofferBuy" exact="$buyoffer"/>
											<set_value name="$Gromount" exact="$Amount"/>
											<set_value name="$GrofitFound" exact="true"/>
											<set_value name="$itemcostsell" exact="$sellcost"/>
											<set_value name="$itemcostbuy" exact="$buycost"/>
										</do_if>
									</do_if>
								</do_if>
								<set_value name="$scantick" exact="1" operation="add"/>
								<do_if value="$scantick gt $scantickrate">
									<set_value name="$scantick" exact="0"/>
									<wait exact="1ms"/>
								</do_if>
							</do_all>
						</do_if>
					</do_all>
				</do_if>
			</do_all>
			<!-- 20231209 print out time taken to check Free Trade -->
			<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Time spent checking Free Trade: %s -- Time spent in queue: %s'.[player.age,(player.age - $FreeTradeStartTime - $TotalQueueTime),$TotalQueueTime]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
			<label name="setupdeals"/>
			<do_if value="$GrofitFound == null">
				<set_value name="$GrofitFound" exact="false"/>
			</do_if>
			<do_if value="$GrofitFound">
				<set_value name="$SearchFailed" exact="0"/>
				<set_value name="$CanAfford" exact="true"/>
				<!-- 20240422 Adjusted to check for spendablemoney? because it is not relevant in preferownfaction or preferownsell -->
				<do_if value="$playerowned and $spendablemoney?">
					<set_value name="$spendablemoney" exact="player.money / 100"/>
					<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Checking if we can afford this deal -- Money: %s -- TotalCost: %s -- PerCost: %s'.[player.age,$spendablemoney,($itemcostsell*$Gromount),$itemcostsell]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
					<set_value name="$CanAfford" exact="$spendablemoney gt ($itemcostsell * $Gromount)"/>
				</do_if>
				<do_if value="$CanAfford">
					<do_if value="$GrofferSell.available and $GrofferBuy.available">
						<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Buying %s %s for %s at %s then Selling %s %s for %s at %s'.[player.age,$Gromount,$GrofferSell.ware,$itemcostsell,$GrofferSell.seller.knownname,$Gromount,$GrofferBuy.ware,$itemcostbuy,$GrofferBuy.buyer.knownname]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
						<wait exact="1ms" sinceversion="3"/>
						<clamp_trade_amount trade="$GrofferBuy" amount="$Gromount" buyer="this.assignedcontrolled" seller="$GrofferSell.seller" result="$ClampedAmount" reason="$ClampedReason"/>
						<do_if value="$ClampedAmount != $Gromount">
							<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- $GrofferBuy -- Ware: %s -- $Gromount: %s -- $ClampedAmount: %s -- Reason: %s.'.[player.age,$GrofferBuy.ware,$Gromount,$ClampedAmount,$ClampedReason]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
							<debug_text text="'MOD: DeadTater -- %s -- Ship: %s(%s) -- $GrofferBuy -- Ware: %s -- $Gromount: %s -- $ClampedAmount: %s -- Reason: %s -- Seller: %s(%s) in %s -- Prevented error prone trade'.[player.age,this.assignedcontrolled.name,this.assignedcontrolled.idcode,$GrofferBuy.ware,$Gromount,$ClampedAmount,$ClampedReason,$GrofferSell.seller.knownname,$GrofferSell.seller.idcode,$GrofferSell.seller.sector.knownname]" context="false" filter="scripts"/>
							<!-- 20240423 Abandoning trade if reduced, this has been catching errors but not enforcing restart -->
							<do_if value="$ClampedAmount lt $Gromount">
								<remove_value name="$ClampedAmount"/>
								<remove_value name="$ClampedReason"/>
								<remove_value name="$buyoffers"/>
								<remove_value name="$selloffers"/>
								<remove_value name="$Grofit"/>
								<remove_value name="$GrofferSell"/>
								<remove_value name="$GrofferBuy"/>
								<remove_value name="$Gromount"/>
								<remove_value name="$GrofitFound"/>
								<remove_value name="$itemcostsell"/>
								<remove_value name="$itemcostbuy"/>
								<resume label="beginning"/>
								<!-- ERROR -->
							</do_if>
						</do_if>
						<remove_value name="$ClampedAmount"/>
						<remove_value name="$ClampedReason"/>
						<wait exact="1ms" sinceversion="3"/>
						<clamp_trade_amount trade="$GrofferSell" amount="$Gromount" buyer="$GrofferBuy.buyer" result="$ClampedAmount" reason="$ClampedReason"/>
						<do_if value="$ClampedAmount != $Gromount">
							<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- $GrofferSell -- Ware: %s -- $Gromount: %s -- $ClampedAmount: %s -- Reason: %s.'.[player.age,$GrofferSell.ware,$Gromount,$ClampedAmount,$ClampedReason]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
							<debug_text text="'MOD: DeadTater -- %s -- Ship: %s(%s) -- $GrofferSell -- Ware: %s -- $Gromount: %s -- $ClampedAmount: %s -- Reason: %s -- Buyer: %s(%s) in %s -- Prevented error prone trade'.[player.age,this.assignedcontrolled.name,this.assignedcontrolled.idcode,$GrofferSell.ware,$Gromount,$ClampedAmount,$ClampedReason,$GrofferBuy.buyer.knownname,$GrofferBuy.buyer.idcode,$GrofferBuy.buyer.sector.knownname]" context="false" filter="scripts"/>
							<!-- 20240423 Abandoning trade if reduced, this has been catching errors but not enforcing restart -->
							<do_if value="$ClampedAmount lt $Gromount">
								<remove_value name="$ClampedAmount"/>
								<remove_value name="$ClampedReason"/>
								<remove_value name="$buyoffers"/>
								<remove_value name="$selloffers"/>
								<remove_value name="$Grofit"/>
								<remove_value name="$GrofferSell"/>
								<remove_value name="$GrofferBuy"/>
								<remove_value name="$Gromount"/>
								<remove_value name="$GrofitFound"/>
								<remove_value name="$itemcostsell"/>
								<remove_value name="$itemcostbuy"/>
								<resume label="beginning"/>
								<!-- ERROR -->
							</do_if>
						</do_if>
						<remove_value name="$ClampedAmount"/>
						<remove_value name="$ClampedReason"/>
						<wait exact="1ms" sinceversion="3"/>
						<do_if value="$GrofitFound and $GrofferSell.available and $GrofferBuy.available">
							<do_if value="($GrofferBuy.buyer.owner == this.assignedcontrolled.owner) or ($GrofferSell.seller.owner == this.assignedcontrolled.owner)">
								<do_if value="($GrofferBuy.buyer.owner == this.assignedcontrolled.owner) and ($GrofferSell.seller.owner != this.assignedcontrolled.owner)">
									<write_to_logbook category="upkeep" title="'DeadTater: '+this.assignedcontrolled.knownname+' ( '+this.assignedcontrolled.idcode+' )'" interaction="showonmap" object="this.assignedcontrolled" money="-$Gromount*$itemcostsell*100" text="{3282837,202}.[$Gromount,$GrofferSell.ware,$itemcostsell,$GrofferBuy.buyer.knownname]" chance="if @$enablelogbook then ($enablelogbook * 100) else (0)"/>
								</do_if>
								<do_elseif value="($GrofferSell.seller.owner == this.assignedcontrolled.owner) and ($GrofferBuy.buyer.owner != this.assignedcontrolled.owner)">
									<write_to_logbook category="upkeep" title="'DeadTater: '+this.assignedcontrolled.knownname+' ( '+this.assignedcontrolled.idcode+' )'" interaction="showonmap" object="this.assignedcontrolled" bonus="$Gromount*$itemcostbuy*100" text="{3282837,203}.[$Gromount,$GrofferSell.ware,$GrofferSell.seller.knownname,$itemcostbuy,$Gromount*$itemcostbuy]" chance="if @$enablelogbook then ($enablelogbook * 100) else (0)"/>
								</do_elseif>
								<do_elseif value="($GrofferSell.seller.owner == this.assignedcontrolled.owner) and ($GrofferBuy.buyer.owner == this.assignedcontrolled.owner)">
									<write_to_logbook category="upkeep" title="'DeadTater: '+this.assignedcontrolled.knownname+' ( '+this.assignedcontrolled.idcode+' )'" interaction="showonmap" object="this.assignedcontrolled" text="{3282837,204}.[$Gromount,$GrofferSell.ware,$GrofferSell.seller.knownname,$GrofferBuy.buyer.knownname]" chance="if @$enablelogbook then ($enablelogbook * 100) else (0)"/>
								</do_elseif>
							</do_if>
							<do_else>
								<set_value name="$ThisShip" exact="this.assignedcontrolled"/>
								<!-- 20231209 printing out lifetime profit handled by md script -->
								<set_value name="$Message" exact="{3282837,205}.[$Gromount,$GrofferSell.ware,$itemcostsell,$itemcostbuy,$Gromount*($itemcostbuy-$itemcostsell)]"/>
								<set_value name="$Message" exact="{3282837,212}.[if global.$DALifetimeGrofit.{$ThisShip}? then (global.$DALifetimeGrofit.{$ThisShip}).formatted.default else {1001,9002}]" operation="add"/>
								<write_to_logbook category="upkeep" title="'DeadTater: '+this.assignedcontrolled.knownname+' ( '+this.assignedcontrolled.idcode+' )'" interaction="showonmap" object="this.assignedcontrolled" money="-$Gromount*$itemcostsell*100" bonus="$Gromount*($itemcostbuy-$itemcostsell)*100" text="$Message" chance="if @$enablelogbook then ($enablelogbook * 100) else (0)"/>
								<remove_value name="$Message"/>
								<remove_value name="$ThisShip"/>
							</do_else>
							<!-- ORDER SYNCPOINT -->
							<do_if value="this.assignedcontrolled.order.id == 'DeadTater'">
								<set_order_syncpoint_reached order="this.assignedcontrolled.order"/>
							</do_if>
							<!-- Attempting to access the trade offers after the order is created spits out errors, so lets set up the orders last. -->
							<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Creating Trade Offer after %s.'.[player.age,(player.age-$starttime)s]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
							<!-- 20240703 New logic for handling of credit transfer. Does not work to prevent the reasoncode 32 error but is potentially a future feature for preventing stations from going broke. -->
							<do_if value="@$transfercreditoption and $GrofferSell.available and ($GrofferSell.seller.trueowner == this.assignedcontrolled.trueowner) and (@$Gromount gt 0) and ($GrofferSell.unitprice gt 0)">
								<set_value name="$CrTransferAmount" exact="($Gromount * $GrofferSell.unitprice) / 100" comment="Cr"/>
								<do_if value="$CrTransferAmount" min="1">
									<transfer_money from="this.assignedcontrolled.trueowner" to="$GrofferSell.seller" amount="($CrTransferAmount)Cr" result="$CrTransferred"/>
									<debug_text text="'MOD: DeadTater -- Ship: %s(%s) -- Credit Transfer Logic -- Ware: %s -- Seller: %s(%s) -- Buyer: %s(%s)\n Unitprice(ct): %s -- CrTransferAmount(Cr): %s -- Rounded CrTransferred(Cr): %s -- Actual CrTransferred(ct): %s'.[this.assignedcontrolled.name,this.assignedcontrolled.idcode,$GrofferBuy.ware,$GrofferSell.seller.knownname,$GrofferSell.seller.idcode,$GrofferBuy.buyer.knownname,$GrofferBuy.buyer.idcode,$GrofferSell.unitprice,$CrTransferAmount,($CrTransferred / 100),$CrTransferred]" context="false" filter="scripts" chance="@$TaterDebugChance * 100"/>
								</do_if>
							</do_if>
							<create_trade_order name="$GrofferBuy" object="this.object" tradeoffer="$GrofferBuy" amount="$Gromount" immediate="true"/>
							<create_trade_order name="$GrofferSell" object="this.object" tradeoffer="$GrofferSell" amount="$Gromount" immediate="true"/>
						</do_if>
						<do_else>
							<do_if value="this.assignedcontrolled.order.id == 'DeadTater'">
								<set_order_syncpoint_reached order="this.assignedcontrolled.order"/>
							</do_if>
							<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Looks like the trade we were looking at is no longer available.'.[player.age]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
						</do_else>
						<wait exact="1ms"/>
					</do_if>
					<do_else>
						<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Looks like the trade we were looking at is no longer available.'.[player.age]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
					</do_else>
				</do_if>
				<do_else>
					<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- We cant afford this deal anymore'.[player.age]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
				</do_else>
			</do_if>
			<do_elseif value="not $GrofitFound">
				<do_if value="(not $SearchFailed?) or (@$SearchFailed == 0)">
					<set_value name="$SearchFailed" exact="1"/>
					<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Order: %s -- Failed to find a trade %s times. Waiting before checking again.'.[player.age,this.assignedcontrolled.order.id,$SearchFailed]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
					<debug_text text="'MOD: DeadTater -- %s -- Ship: %s(%s) -- Trades Failed: %s'.[player.age,this.assignedcontrolled.name,this.assignedcontrolled.idcode,$SearchFailed]" context="false" filter="error" chance="@$TaterDebugChance * 100"/>
					<set_command command="command.wait"/>
					<set_command_action commandaction="commandaction.standingby"/>
					<!-- Maxskill == 10s - 12s ; 9skill == 11.2s - 18s ; Minskill == 13s - 27s -->
					<wait min="10.0s + ((30.0 - this.assignedcontrolled.pilot.skill.piloting * 2) / 10.0)s" max="12.0s + ((150.0 - this.assignedcontrolled.pilot.skill.piloting * 10) / 10.0)s" seed="this.ship.seed"/>
					<resume label="beginning"/>
				</do_if>
				<do_elseif value="(@$SearchFailed le 5) and (@$SearchFailed ge 1)">
					<set_value name="$SearchFailed" exact="1" operation="add"/>
					<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Order: %s -- Failed to find a trade %s times. Waiting before checking again.'.[player.age,this.assignedcontrolled.order.id,$SearchFailed]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
					<debug_text text="'MOD: DeadTater -- %s -- Ship: %s(%s) -- Trades Failed: %s'.[player.age,this.assignedcontrolled.name,this.assignedcontrolled.idcode,$SearchFailed]" context="false" filter="error" chance="@$TaterDebugChance * 100"/>
					<set_command command="command.wait"/>
					<set_command_action commandaction="commandaction.standingby"/>
					<!-- Maxskill == (10s - 15s) * $SearchFailed ; 9skill == (11.2s - 18.6s) * $SearchFailed ; Minskill == (13s - 24s) * $SearchFailed -->
					<wait min="(10.0s * $SearchFailed)s + (((30.0 - this.assignedcontrolled.pilot.skill.piloting * 2) / 10.0)*$SearchFailed)s" max="(12.0s * $SearchFailed)s + (((150.0 - this.assignedcontrolled.pilot.skill.piloting * 10) / 10.0)*$SearchFailed)s" seed="this.ship.seed"/>
					<resume label="beginning"/>
				</do_elseif>
				<do_elseif value="@$SearchFailed ge 6">
					<set_value name="$SearchFailed" exact="1" operation="add"/>
					<debug_to_file name="this.assignedcontrolled.idcode" directory="'DeadTater'" text="'MOD: DeadTater -- %s -- Order: %s -- Failed to find a trade %s times. Notifying player.'.[player.age,this.assignedcontrolled.order.id,$SearchFailed]" output="false" append="true" chance="@$TaterDebugChance * 100"/>
					<debug_text text="'MOD: DeadTater -- %s -- Ship: %s(%s) -- Trades Failed: %s'.[player.age,this.assignedcontrolled.name,this.assignedcontrolled.idcode,$SearchFailed]" context="false" filter="error" chance="@$TaterDebugChance * 100"/>
					<set_command command="command.wait"/>
					<set_command_action commandaction="commandaction.standingby"/>
					<write_to_logbook category="upkeep" title="'DeadTater: %s(%s)'.[this.assignedcontrolled.knownname,this.assignedcontrolled.idcode]" interaction="showonmap" object="this.assignedcontrolled" text="{3282837,211}.[$SearchFailed,@$buyspaces.count,@$sellspaces.count,@$usedwarebasket.count]" highlighted="true"/>
					<!-- Maxskill == (20s - 24s) * $SearchFailed ; 9skill == (21.2s - 30s) * $SearchFailed ; Minskill == (23s - 39s) * $SearchFailed -->
					<wait min="(20.0s * $SearchFailed)s + (((30.0 - this.assignedcontrolled.pilot.skill.piloting * 2) / 10.0)*$SearchFailed)s" max="(24.0s * $SearchFailed)s + (((150.0 - this.assignedcontrolled.pilot.skill.piloting * 10) / 10.0)*$SearchFailed)s" seed="this.ship.seed"/>
					<resume label="beginning"/>
				</do_elseif>
			</do_elseif>
			<do_else>
				<debug_text text="'MOD: DeadTater -- %s -- Ship: %s(%s) -- Trade failure procedures failed: %s'.[player.age,this.assignedcontrolled.name,this.assignedcontrolled.idcode,if $SearchFailed? then $SearchFailed else 'Null',if $GrofitFound? then $GrofitFound else 'Null', if $StationTrade then $StationTrade else 'Null']" context="false" filter="error" chance="@$TaterDebugChance * 100"/>
			</do_else>
			<label name="afterdealsetup"/>
			<label name="finish"/>
			<label name="jobexpired"/>
		</actions>
	</attention>
</aiscript>
